{"ast":null,"code":"import { Get, Put } from \"../services\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { eventChannel } from 'redux-saga';\nimport { GET_NOTIFICATIONS_FAILURE, GET_NOTIFICATIONS_REQUEST, GET_NOTIFICATIONS_SUCCESS, MARK_AS_READ_SUCCESS, MARK_AS_READ_FAILURE, MARK_AS_READ_REQUEST, GET_COUNT_SUCCESS, GET_COUNT_FAILURE, GET_COUNT_REQUEST } from './actions';\nimport { readLocalStorage, isLogged } from '../helpers';\nimport { LOADER_END, LOADER_START } from \"../loader/actions\";\nimport { toast } from \"react-toastify\";\n\nfunction* getNotificationsSaga({\n  payload\n}) {\n  if (isLogged()) {\n    try {\n      yield put({\n        type: LOADER_START\n      });\n      const response = yield call(Get, `notification/get-user`, {}, {});\n\n      if (response && !response.error) {\n        yield put({\n          type: GET_NOTIFICATIONS_SUCCESS,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      } else {\n        yield put({\n          type: GET_NOTIFICATIONS_FAILURE,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      }\n    } catch (error) {\n      yield put({\n        type: GET_NOTIFICATIONS_FAILURE,\n        payload: error\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* getCountSaga() {\n  if (isLogged()) {\n    try {\n      yield put({\n        type: LOADER_START\n      });\n      const response = yield call(Get, `notification/get-count`, {}, {});\n\n      if (response && !response.error) {\n        yield put({\n          type: GET_COUNT_SUCCESS,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      } else {\n        yield put({\n          type: GET_COUNT_FAILURE,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      }\n    } catch (error) {\n      yield put({\n        type: GET_COUNT_FAILURE,\n        payload: error\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* markAsReadSaga({\n  payload\n}) {\n  if (isLogged()) {\n    try {\n      const ids = [...payload.values];\n      yield put({\n        type: LOADER_START\n      });\n      const response = yield call(Put, `notification/mark-as-read`, ids, {}, false);\n\n      if (response && !response.error) {\n        yield put({\n          type: MARK_AS_READ_SUCCESS,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      } else {\n        yield put({\n          type: MARK_AS_READ_FAILURE,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      }\n    } catch (error) {\n      yield put({\n        type: MARK_AS_READ_FAILURE,\n        payload: error\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nexport default function* Saga() {\n  yield takeLatest(GET_NOTIFICATIONS_REQUEST, getNotificationsSaga);\n  yield takeLatest(MARK_AS_READ_REQUEST, markAsReadSaga);\n  yield takeLatest(GET_COUNT_REQUEST, getCountSaga);\n}","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/notifications/sagas.js"],"names":["Get","Put","call","put","takeLatest","eventChannel","GET_NOTIFICATIONS_FAILURE","GET_NOTIFICATIONS_REQUEST","GET_NOTIFICATIONS_SUCCESS","MARK_AS_READ_SUCCESS","MARK_AS_READ_FAILURE","MARK_AS_READ_REQUEST","GET_COUNT_SUCCESS","GET_COUNT_FAILURE","GET_COUNT_REQUEST","readLocalStorage","isLogged","LOADER_END","LOADER_START","toast","getNotificationsSaga","payload","type","response","error","getCountSaga","markAsReadSaga","ids","values","Saga"],"mappings":"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","sourcesContent":["import { Get, Put } from \"../services\";\r\nimport { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { eventChannel } from 'redux-saga';\r\nimport { GET_NOTIFICATIONS_FAILURE, GET_NOTIFICATIONS_REQUEST, GET_NOTIFICATIONS_SUCCESS, MARK_AS_READ_SUCCESS, MARK_AS_READ_FAILURE, MARK_AS_READ_REQUEST, GET_COUNT_SUCCESS, GET_COUNT_FAILURE, GET_COUNT_REQUEST } from './actions';\r\nimport { readLocalStorage, isLogged } from '../helpers';\r\nimport { LOADER_END, LOADER_START } from \"../loader/actions\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nfunction* getNotificationsSaga({ payload }) {\r\n  if (isLogged()) {\r\n    try {\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Get, `notification/get-user`, {}, {});\r\n      if (response && !response.error) {\r\n        yield put({ type: GET_NOTIFICATIONS_SUCCESS, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: GET_NOTIFICATIONS_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: GET_NOTIFICATIONS_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* getCountSaga() {\r\n  if (isLogged()) {\r\n    try {\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Get, `notification/get-count`, {}, {});\r\n      if (response && !response.error) {\r\n        yield put({ type: GET_COUNT_SUCCESS, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: GET_COUNT_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: GET_COUNT_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* markAsReadSaga({ payload }) {\r\n  if (isLogged()) {\r\n    try {\r\n      const ids = [...payload.values];\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Put, `notification/mark-as-read`, ids, {}, false);\r\n      if (response && !response.error) {\r\n        yield put({ type: MARK_AS_READ_SUCCESS, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: MARK_AS_READ_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: MARK_AS_READ_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\n\r\nexport default function* Saga() {\r\n  yield takeLatest(GET_NOTIFICATIONS_REQUEST, getNotificationsSaga);\r\n  yield takeLatest(MARK_AS_READ_REQUEST, markAsReadSaga);\r\n  yield takeLatest(GET_COUNT_REQUEST, getCountSaga);\r\n}"]},"metadata":{},"sourceType":"module"}