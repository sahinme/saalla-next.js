{"ast":null,"code":"import { Get, Post, PutFormData, Delete } from \"../services\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { GET_CONVERSATION_DETAIL_FAILURE, GET_CONVERSATION_DETAIL_REQUEST, GET_CONVERSATION_DETAIL_SUCCESS, GET_CONVERSATIONS_FAILURE, GET_CONVERSATIONS_REQUEST, GET_CONVERSATIONS_SUCCESS, SEND_MESSAGE_SUCCESS, SEND_MESSAGE_FAILURE, SEND_MESSAGE_REQUEST, getConversationDetailRequest, getConversationsRequest } from \"./actions\";\n/* import { push } from 'react-router-redux';\r\n */\n\nimport { readLocalStorage, isLogged } from \"../helpers\";\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\n\nfunction* getConversationsSaga() {\n  if (isLogged()) {\n    try {\n      yield put({\n        type: LOADER_START\n      });\n      const response = yield call(Get, `conversation/get-all`, {}, {}, false);\n\n      if (response && !response.error) {\n        yield put({\n          type: GET_CONVERSATIONS_SUCCESS,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      } else {\n        yield put({\n          type: GET_CONVERSATIONS_FAILURE,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      }\n    } catch (error) {\n      yield put({\n        type: GET_CONVERSATIONS_FAILURE,\n        payload: error\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  }\n}\n\nfunction* getConversationDetailSaga({\n  payload\n}) {\n  try {\n    const user = readLocalStorage('user');\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Get, `conversation/get/by-id?id=${payload.id}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: GET_CONVERSATION_DETAIL_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: GET_CONVERSATION_DETAIL_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: GET_CONVERSATION_DETAIL_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* sendMessageSaga({\n  payload\n}) {\n  let tempResponseData = {};\n\n  try {\n    const user = readLocalStorage('user');\n    payload.senderId = user.id;\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Post, `message/create`, payload, {}, false);\n    tempResponseData = response;\n\n    if (response && !response.error) {\n      yield put({\n        type: SEND_MESSAGE_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: SEND_MESSAGE_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: SEND_MESSAGE_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getConversationDetailRequest({\n    id: tempResponseData.conversationId\n  }));\n\n  if (!payload.conversationId) {\n    yield put(push('/chat'));\n    yield put(getConversationsRequest());\n  }\n}\n\nexport default function* Saga() {\n  yield takeLatest(GET_CONVERSATIONS_REQUEST, getConversationsSaga);\n  yield takeLatest(GET_CONVERSATION_DETAIL_REQUEST, getConversationDetailSaga);\n  yield takeLatest(SEND_MESSAGE_REQUEST, sendMessageSaga);\n}","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/conversation/sagas.js"],"names":["Get","Post","PutFormData","Delete","call","put","takeLatest","GET_CONVERSATION_DETAIL_FAILURE","GET_CONVERSATION_DETAIL_REQUEST","GET_CONVERSATION_DETAIL_SUCCESS","GET_CONVERSATIONS_FAILURE","GET_CONVERSATIONS_REQUEST","GET_CONVERSATIONS_SUCCESS","SEND_MESSAGE_SUCCESS","SEND_MESSAGE_FAILURE","SEND_MESSAGE_REQUEST","getConversationDetailRequest","getConversationsRequest","readLocalStorage","isLogged","LOADER_START","LOADER_END","getConversationsSaga","type","response","error","payload","getConversationDetailSaga","user","id","sendMessageSaga","tempResponseData","senderId","conversationId","push","Saga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,WAApB,EAAiCC,MAAjC,QAA+C,aAA/C;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,+BADF,EACmCC,+BADnC,EACoEC,+BADpE,EAEEC,yBAFF,EAE6BC,yBAF7B,EAEwDC,yBAFxD,EAEmFC,oBAFnF,EAEyGC,oBAFzG,EAE+HC,oBAF/H,EAEqJC,4BAFrJ,EAEmLC,uBAFnL,QAGO,WAHP;AAIA;;;AACG,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,YAA3C;AACH,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,mBAAzC;;AAEA,UAAUC,oBAAV,GAAiC;AAC/B,MAAIH,QAAQ,EAAZ,EAAgB;AACd,QAAI;AACF,YAAMd,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACA,YAAMI,QAAQ,GAAG,MAAMpB,IAAI,CAACJ,GAAD,EAAO,sBAAP,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,KAAtC,CAA3B;;AACA,UAAIwB,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,cAAMpB,GAAG,CAAC;AAAEkB,UAAAA,IAAI,EAAEX,yBAAR;AAAmCc,UAAAA,OAAO,EAAEF;AAA5C,SAAD,CAAT;AACA,cAAMnB,GAAG,CAAC;AAAEkB,UAAAA,IAAI,EAAEF;AAAR,SAAD,CAAT;AACD,OAHD,MAGO;AACL,cAAMhB,GAAG,CAAC;AAAEkB,UAAAA,IAAI,EAAEb,yBAAR;AAAmCgB,UAAAA,OAAO,EAAEF;AAA5C,SAAD,CAAT;AACA,cAAMnB,GAAG,CAAC;AAAEkB,UAAAA,IAAI,EAAEF;AAAR,SAAD,CAAT;AACD;AACF,KAVD,CAUE,OAAOI,KAAP,EAAc;AACd,YAAMpB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEb,yBAAR;AAAmCgB,QAAAA,OAAO,EAAED;AAA5C,OAAD,CAAT;AACA,YAAMpB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEF;AAAR,OAAD,CAAT;AACD;AACF;AACF;;AAED,UAAUM,yBAAV,CAAoC;AAAED,EAAAA;AAAF,CAApC,EAAiD;AAC/C,MAAI;AACF,UAAME,IAAI,GAAGV,gBAAgB,CAAC,MAAD,CAA7B;AACA,UAAMb,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACA,UAAMI,QAAQ,GAAG,MAAMpB,IAAI,CAACJ,GAAD,EAAO,6BAA4B0B,OAAO,CAACG,EAAG,EAA9C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,KAAzD,CAA3B;;AACA,QAAIL,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAMpB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEd,+BAAR;AAAyCiB,QAAAA,OAAO,EAAEF;AAAlD,OAAD,CAAT;AACA,YAAMnB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEF;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMhB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEhB,+BAAR;AAAyCmB,QAAAA,OAAO,EAAEF;AAAlD,OAAD,CAAT;AACA,YAAMnB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEF;AAAR,OAAD,CAAT;AACD;AACF,GAXD,CAWE,OAAOI,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAEhB,+BAAR;AAAyCmB,MAAAA,OAAO,EAAED;AAAlD,KAAD,CAAT;AACA,UAAMpB,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAEF;AAAR,KAAD,CAAT;AACD;AACF;;AAED,UAAUS,eAAV,CAA0B;AAAEJ,EAAAA;AAAF,CAA1B,EAAuC;AACrC,MAAIK,gBAAgB,GAAG,EAAvB;;AACA,MAAI;AACF,UAAMH,IAAI,GAAGV,gBAAgB,CAAC,MAAD,CAA7B;AACAQ,IAAAA,OAAO,CAACM,QAAR,GAAmBJ,IAAI,CAACC,EAAxB;AACA,UAAMxB,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACA,UAAMI,QAAQ,GAAG,MAAMpB,IAAI,CAACH,IAAD,EAAQ,gBAAR,EAAyByB,OAAzB,EAAkC,EAAlC,EAAsC,KAAtC,CAA3B;AACAK,IAAAA,gBAAgB,GAAGP,QAAnB;;AACA,QAAIA,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAMpB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEV,oBAAR;AAA8Ba,QAAAA,OAAO,EAAEF;AAAvC,OAAD,CAAT;AACA,YAAMnB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEF;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMhB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAET,oBAAR;AAA8BY,QAAAA,OAAO,EAAEF;AAAvC,OAAD,CAAT;AACA,YAAMnB,GAAG,CAAC;AAAEkB,QAAAA,IAAI,EAAEF;AAAR,OAAD,CAAT;AACD;AACF,GAbD,CAaE,OAAOI,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAET,oBAAR;AAA8BY,MAAAA,OAAO,EAAED;AAAvC,KAAD,CAAT;AACA,UAAMpB,GAAG,CAAC;AAAEkB,MAAAA,IAAI,EAAEF;AAAR,KAAD,CAAT;AACD;;AACD,QAAMhB,GAAG,CAACW,4BAA4B,CAAC;AAAEa,IAAAA,EAAE,EAAEE,gBAAgB,CAACE;AAAvB,GAAD,CAA7B,CAAT;;AACA,MAAI,CAACP,OAAO,CAACO,cAAb,EAA6B;AAC3B,UAAM5B,GAAG,CAAC6B,IAAI,CAAC,OAAD,CAAL,CAAT;AACA,UAAM7B,GAAG,CAACY,uBAAuB,EAAxB,CAAT;AACD;AACF;;AAED,eAAe,UAAUkB,IAAV,GAAiB;AAC9B,QAAM7B,UAAU,CAACK,yBAAD,EAA4BW,oBAA5B,CAAhB;AACA,QAAMhB,UAAU,CAACE,+BAAD,EAAkCmB,yBAAlC,CAAhB;AACA,QAAMrB,UAAU,CAACS,oBAAD,EAAuBe,eAAvB,CAAhB;AACD","sourcesContent":["import { Get, Post, PutFormData, Delete } from \"../services\";\r\nimport { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  GET_CONVERSATION_DETAIL_FAILURE, GET_CONVERSATION_DETAIL_REQUEST, GET_CONVERSATION_DETAIL_SUCCESS,\r\n  GET_CONVERSATIONS_FAILURE, GET_CONVERSATIONS_REQUEST, GET_CONVERSATIONS_SUCCESS, SEND_MESSAGE_SUCCESS, SEND_MESSAGE_FAILURE, SEND_MESSAGE_REQUEST, getConversationDetailRequest, getConversationsRequest\r\n} from \"./actions\";\r\n/* import { push } from 'react-router-redux';\r\n */import { readLocalStorage, isLogged } from \"../helpers\";\r\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\r\n\r\nfunction* getConversationsSaga() {\r\n  if (isLogged()) {\r\n    try {\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Get, `conversation/get-all`, {}, {}, false);\r\n      if (response && !response.error) {\r\n        yield put({ type: GET_CONVERSATIONS_SUCCESS, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: GET_CONVERSATIONS_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: GET_CONVERSATIONS_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  }\r\n}\r\n\r\nfunction* getConversationDetailSaga({ payload }) {\r\n  try {\r\n    const user = readLocalStorage('user');\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Get, `conversation/get/by-id?id=${payload.id}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: GET_CONVERSATION_DETAIL_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: GET_CONVERSATION_DETAIL_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: GET_CONVERSATION_DETAIL_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* sendMessageSaga({ payload }) {\r\n  let tempResponseData = {}\r\n  try {\r\n    const user = readLocalStorage('user');\r\n    payload.senderId = user.id;\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Post, `message/create`, payload, {}, false);\r\n    tempResponseData = response;\r\n    if (response && !response.error) {\r\n      yield put({ type: SEND_MESSAGE_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: SEND_MESSAGE_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: SEND_MESSAGE_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getConversationDetailRequest({ id: tempResponseData.conversationId }));\r\n  if (!payload.conversationId) {\r\n    yield put(push('/chat'));\r\n    yield put(getConversationsRequest());\r\n  }\r\n}\r\n\r\nexport default function* Saga() {\r\n  yield takeLatest(GET_CONVERSATIONS_REQUEST, getConversationsSaga);\r\n  yield takeLatest(GET_CONVERSATION_DETAIL_REQUEST, getConversationDetailSaga);\r\n  yield takeLatest(SEND_MESSAGE_REQUEST, sendMessageSaga);\r\n}"]},"metadata":{},"sourceType":"module"}