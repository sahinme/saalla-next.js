{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Get, Post, Delete, PostFormData } from \"../services\";\nimport Router from 'next/router';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { GET_POST_DETAIL_FAILURE, GET_POST_DETAIL_REQUEST, GET_POST_DETAIL_SUCCESS, GET_USER_POSTS_REQUEST, GET_USER_POSTS_SUCCESS, GET_USER_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, getPostDetailRequest, CONVERT_LIKE_POST_SUCCESS, CONVERT_LIKE_POST_FAILURE, CONVERT_LIKE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE, CREATE_POST_REQUEST, VOTE_POST_SUCCESS, VOTE_POST_FAILURE, VOTE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE, getUserPostsRequest, DELETE_POST_REQUEST, DELETE_MODERATOR_FAILURE, DELETE_MODERATOR_SUCCESS, DELETE_MODERATOR_REQUEST } from './actions';\nimport { readLocalStorage } from \"../helpers\";\nimport { getHomePostsRequest } from \"../home/actions\";\n/* import { push } from \"react-router-redux\";\r\n */\n\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\nimport { getCommunityRequest, getCommunityPostsRequest } from \"../community/actions\";\nimport { getProfilePostsRequest } from \"../profile/actions\";\n\nfunction* getPostDetailSaga({\n  payload\n}) {\n  try {\n    if (payload.loaderStart) {\n      yield put({\n        type: LOADER_START\n      });\n    }\n\n    const url = `post/get?slug=${payload.slug}`;\n    const response = yield call(Get, url, {}, payload.token, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: GET_POST_DETAIL_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: GET_POST_DETAIL_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: GET_POST_DETAIL_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* getUserPostsSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Get, `post/get-user-posts?username=${payload.username}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: GET_USER_POSTS_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: GET_USER_POSTS_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: GET_USER_POSTS_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* votePostSaga({\n  payload\n}) {\n  const votedUsername = payload.username;\n\n  try {\n    const user = readLocalStorage('user');\n    const newPayload = {\n      value: payload.value,\n      userId: user.id,\n      postId: payload.postId\n    };\n    const response = yield call(Post, `post/vote`, newPayload, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: VOTE_POST_SUCCESS,\n        payload: response\n      });\n    } else {\n      yield put({\n        type: VOTE_POST_FAILURE,\n        payload: response\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: VOTE_POST_FAILURE,\n      payload: error\n    });\n  }\n\n  if (payload.page == \"community\") {\n    yield put(getCommunityPostsRequest({\n      slug: payload.cSlug,\n      isVoted: true,\n      pageNumber: payload.pageNumber,\n      pageSize: payload.pageSize\n    }));\n    yield put(getCommunityRequest({\n      slug: payload.cSlug\n    }));\n  } else if (payload.page == \"user\") {\n    yield put(getUserPostsRequest({\n      username: votedUsername\n    }));\n  } else if (payload.page == \"post_detail\") {\n    yield put(getPostDetailRequest({\n      search: `?status=${payload.postId}`,\n      loaderStart: false\n    }));\n  } else {\n    yield put(getHomePostsRequest({\n      loaderStart: false,\n      pageNumber: payload.pageNumber,\n      pageSize: payload.pageSize,\n      isVoted: payload.isVoted\n    }));\n  }\n}\n\nfunction* createPostSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const user = readLocalStorage('user');\n    const response = yield call(PostFormData, `post/create-post`, payload, {});\n\n    if (response && !response.error) {\n      yield put({\n        type: CREATE_POST_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n      yield call(Router.push(`/p/${user.username}`));\n    } else {\n      yield put({\n        type: CREATE_POST_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: CREATE_POST_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* deletePostSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Delete, `post/delete?id=${payload.id}`, {}, {});\n\n    if (response && !response.error) {\n      yield put({\n        type: DELETE_POST_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: DELETE_POST_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: DELETE_POST_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getProfilePostsRequest({}));\n}\n\nfunction* deleteModeratorSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Delete, `/post/moderator-delete`, payload, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: DELETE_MODERATOR_SUCCESS,\n        payload: _objectSpread(_objectSpread({}, response), {}, {\n          deletedPost: payload.postId\n        })\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: DELETE_MODERATOR_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: DELETE_MODERATOR_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getCommunityRequest({\n    slug: payload.slug\n  })); //yield put(getCommunityPostsRequest({ slug: payload.slug, pageNumber: payload.pageNumber, pageSize: payload.pageSize, }));\n}\n\nexport default function* Saga() {\n  yield takeLatest(GET_POST_DETAIL_REQUEST, getPostDetailSaga);\n  yield takeLatest(GET_USER_POSTS_REQUEST, getUserPostsSaga);\n  yield takeLatest(VOTE_POST_REQUEST, votePostSaga);\n  yield takeLatest(CREATE_POST_REQUEST, createPostSaga);\n  yield takeLatest(DELETE_POST_REQUEST, deletePostSaga);\n  yield takeLatest(DELETE_MODERATOR_REQUEST, deleteModeratorSaga);\n}","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/posts/sagas.js"],"names":["Get","Post","Delete","PostFormData","Router","call","put","takeLatest","GET_POST_DETAIL_FAILURE","GET_POST_DETAIL_REQUEST","GET_POST_DETAIL_SUCCESS","GET_USER_POSTS_REQUEST","GET_USER_POSTS_SUCCESS","GET_USER_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","getPostDetailRequest","CONVERT_LIKE_POST_SUCCESS","CONVERT_LIKE_POST_FAILURE","CONVERT_LIKE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","CREATE_POST_REQUEST","VOTE_POST_SUCCESS","VOTE_POST_FAILURE","VOTE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","getUserPostsRequest","DELETE_POST_REQUEST","DELETE_MODERATOR_FAILURE","DELETE_MODERATOR_SUCCESS","DELETE_MODERATOR_REQUEST","readLocalStorage","getHomePostsRequest","LOADER_START","LOADER_END","getCommunityRequest","getCommunityPostsRequest","getProfilePostsRequest","getPostDetailSaga","payload","loaderStart","type","url","slug","response","token","error","getUserPostsSaga","username","votePostSaga","votedUsername","user","newPayload","value","userId","id","postId","page","cSlug","isVoted","pageNumber","pageSize","search","createPostSaga","push","deletePostSaga","deleteModeratorSaga","deletedPost","Saga"],"mappings":"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","sourcesContent":["import { Get, Post, Delete, PostFormData } from \"../services\";\r\nimport Router from 'next/router'\r\nimport { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { GET_POST_DETAIL_FAILURE, GET_POST_DETAIL_REQUEST, GET_POST_DETAIL_SUCCESS, GET_USER_POSTS_REQUEST, GET_USER_POSTS_SUCCESS, GET_USER_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, getPostDetailRequest, CONVERT_LIKE_POST_SUCCESS, CONVERT_LIKE_POST_FAILURE, CONVERT_LIKE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE, CREATE_POST_REQUEST, VOTE_POST_SUCCESS, VOTE_POST_FAILURE, VOTE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE, getUserPostsRequest, DELETE_POST_REQUEST, DELETE_MODERATOR_FAILURE, DELETE_MODERATOR_SUCCESS, DELETE_MODERATOR_REQUEST } from './actions';\r\nimport { readLocalStorage } from \"../helpers\";\r\nimport { getHomePostsRequest } from \"../home/actions\";\r\n/* import { push } from \"react-router-redux\";\r\n */import { LOADER_START, LOADER_END } from \"../loader/actions\";\r\nimport { getCommunityRequest, getCommunityPostsRequest } from \"../community/actions\";\r\nimport { getProfilePostsRequest } from \"../profile/actions\";\r\n\r\nfunction* getPostDetailSaga({ payload }) {\r\n  try {\r\n    if (payload.loaderStart) {\r\n      yield put({ type: LOADER_START });\r\n\r\n    }\r\n    const url = `post/get?slug=${payload.slug}`;\r\n    const response = yield call(Get, url, {}, payload.token, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: GET_POST_DETAIL_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: GET_POST_DETAIL_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: GET_POST_DETAIL_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* getUserPostsSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Get, `post/get-user-posts?username=${payload.username}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: GET_USER_POSTS_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: GET_USER_POSTS_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: GET_USER_POSTS_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* votePostSaga({ payload }) {\r\n  const votedUsername = payload.username;\r\n  try {\r\n    const user = readLocalStorage('user')\r\n    const newPayload = { value: payload.value, userId: user.id, postId: payload.postId }\r\n    const response = yield call(Post, `post/vote`, newPayload, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: VOTE_POST_SUCCESS, payload: response });\r\n    } else {\r\n      yield put({ type: VOTE_POST_FAILURE, payload: response });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: VOTE_POST_FAILURE, payload: error });\r\n  }\r\n  if (payload.page == \"community\") {\r\n    yield put(getCommunityPostsRequest({ slug: payload.cSlug, isVoted: true, pageNumber: payload.pageNumber, pageSize: payload.pageSize, }));\r\n    yield put(getCommunityRequest({ slug: payload.cSlug }))\r\n  } else if (payload.page == \"user\") {\r\n    yield put(getUserPostsRequest({ username: votedUsername }))\r\n  } else if (payload.page == \"post_detail\") {\r\n    yield put(getPostDetailRequest({ search: `?status=${payload.postId}`, loaderStart: false }));\r\n  } else {\r\n    yield put(getHomePostsRequest({ loaderStart: false, pageNumber: payload.pageNumber, pageSize: payload.pageSize, isVoted: payload.isVoted }));\r\n  }\r\n}\r\n\r\nfunction* createPostSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const user = readLocalStorage('user');\r\n    const response = yield call(PostFormData, `post/create-post`, payload, {});\r\n    if (response && !response.error) {\r\n      yield put({ type: CREATE_POST_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n      yield call(Router.push(`/p/${user.username}`))\r\n    } else {\r\n      yield put({ type: CREATE_POST_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: CREATE_POST_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* deletePostSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Delete, `post/delete?id=${payload.id}`, {}, {});\r\n    if (response && !response.error) {\r\n      yield put({ type: DELETE_POST_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: DELETE_POST_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: DELETE_POST_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getProfilePostsRequest({}));\r\n}\r\n\r\nfunction* deleteModeratorSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Delete, `/post/moderator-delete`, payload, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: DELETE_MODERATOR_SUCCESS, payload: { ...response, deletedPost: payload.postId } });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: DELETE_MODERATOR_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: DELETE_MODERATOR_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getCommunityRequest({ slug: payload.slug }));\r\n  //yield put(getCommunityPostsRequest({ slug: payload.slug, pageNumber: payload.pageNumber, pageSize: payload.pageSize, }));\r\n}\r\n\r\nexport default function* Saga() {\r\n  yield takeLatest(GET_POST_DETAIL_REQUEST, getPostDetailSaga);\r\n  yield takeLatest(GET_USER_POSTS_REQUEST, getUserPostsSaga);\r\n  yield takeLatest(VOTE_POST_REQUEST, votePostSaga);\r\n  yield takeLatest(CREATE_POST_REQUEST, createPostSaga);\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePostSaga);\r\n  yield takeLatest(DELETE_MODERATOR_REQUEST, deleteModeratorSaga);\r\n}"]},"metadata":{},"sourceType":"module"}