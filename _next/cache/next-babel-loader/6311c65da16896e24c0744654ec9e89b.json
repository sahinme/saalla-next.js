{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"D:\\\\repos\\\\saalla-next.js\\\\pages\\\\u\\\\[username].jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport Router, { withRouter } from \"next/router\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport SocialCard from \"../../components/SocialCard\";\nimport { getUserByUsername as _getUserByUsername } from \"../../lib/users/actions\";\nimport UserCard from \"../../components/User/userCard\";\nimport MainLayout from \"../../components/mainLayout\";\nimport { getUserPostsRequest, votePostRequest } from \"../../lib/posts/actions\";\nimport { getConversationsRequest, sendMessageRequest } from \"../../lib/conversation/actions\";\nimport SendMessageModal from \"../../components/User/sendMessageModal\";\nimport { isLogged } from \"../../lib/helpers\";\n\nfunction User(props) {\n  _s();\n\n  var _this = this;\n\n  var user = props.user,\n      posts = props.posts,\n      conversations = props.conversations;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(null),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState({}),\n      newMessageUser = _useState3[0],\n      setUser = _useState3[1];\n\n  var onSendMessage = function onSendMessage() {\n    if (!isLogged()) {\n      Router.push(\"/giris-yap\");\n      return;\n    }\n\n    var isExist = false;\n    conversations.map(function (item) {\n      if (item.receiver.id == user.id || item.sender.id == user.id) {\n        Router.push({\n          pathname: \"/chat\",\n          query: {\n            userId: user.id,\n            conversationId: item.id,\n            username: user.username\n          }\n        });\n        isExist = true;\n      }\n    });\n\n    if (!isExist) {\n      setOpen(true);\n      setUser({\n        userId: user.id,\n        username: user.username\n      });\n    }\n  };\n\n  var handleChange = function handleChange(e) {\n    setText(e.target.value);\n  };\n\n  var handleSubmit = function handleSubmit() {\n    var payload = {\n      receiverId: newMessageUser.userId,\n      content: text\n    };\n    props.sendMessage(payload);\n    setOpen(false);\n  };\n\n  var onVote = function onVote(values) {\n    var votePost = props.votePost;\n\n    var payload = _objectSpread(_objectSpread({}, values), {}, {\n      loaderStart: false,\n      page: \"user\",\n      username: user.username\n    });\n\n    votePost(payload);\n  };\n\n  return __jsx(MainLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, user && __jsx(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, user.username + \" | Saalla\"), __jsx(\"meta\", {\n    charSet: \"utf-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: user.bio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), __jsx(\"link\", {\n    href: \"https://saalla.com/\".concat(user.username),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })), __jsx(Container, {\n    style: {\n      marginTop: \"8rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    style: {\n      flexWrap: \"wrap-reverse\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    style: {\n      paddingBottom: \"10px\",\n      paddingTop: \"20px\"\n    },\n    xs: 12,\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, posts && posts.length > 0 && posts.map(function (item) {\n    return __jsx(SocialCard, {\n      id: item.id,\n      img: item.mediaContentPath,\n      pSlug: item.slug,\n      createdDate: item.createdDateTime,\n      content: item.content,\n      contentType: item.contentType,\n      community: item.community,\n      onVote: onVote,\n      linkUrl: item.linkUrl,\n      voteCount: item.voteCount,\n      userPostVote: item.userPostVote,\n      comments: item.comments,\n      user: user && {\n        userName: user.username,\n        profileImagePath: user.profileImagePath\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    });\n  })), __jsx(Col, {\n    style: {\n      paddingBottom: \"10px\",\n      paddingTop: \"5rem\"\n    },\n    xs: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, user && __jsx(UserCard, {\n    img: user.profileImagePath,\n    username: user.username,\n    email: user.emailAddress,\n    id: user.id,\n    onMessage: onSendMessage,\n    bio: user.bio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }))), __jsx(SendMessageModal, {\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    data: newMessageUser,\n    text: text,\n    open: open,\n    onClose: function onClose() {\n      return setOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(User, \"yVxTghKs2cDBkCe4VtRmOiudhhY=\");\n\n_c = User;\n\nUser.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var isServer, store, query;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            isServer = _ref.isServer, store = _ref.store, query = _ref.query;\n            _context.next = 3;\n            return store.execSagaTasks(isServer, function (dispatch) {\n              var username = query.username;\n              dispatch(_getUserByUsername(username));\n              dispatch(getUserPostsRequest({\n                username: username\n              }));\n              dispatch(getConversationsRequest());\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", {});\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getUserByUsername: function getUserByUsername(username) {\n      return dispatch(_getUserByUsername(username));\n    },\n    getUserPosts: function getUserPosts(payload) {\n      return dispatch(getUserPostsRequest(payload));\n    },\n    getConversations: function getConversations() {\n      return dispatch(getConversationsRequest({}));\n    },\n    sendMessage: function sendMessage(payload) {\n      return dispatch(sendMessageRequest(payload));\n    },\n    votePost: function votePost(payload) {\n      return dispatch(votePostRequest(payload));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user.data,\n    conversations: state.conversations.data,\n    posts: state.posts.data\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(User));\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["D:/repos/saalla-next.js/pages/u/[username].jsx"],"names":["React","useState","connect","Helmet","Router","withRouter","Row","Col","Container","SocialCard","getUserByUsername","UserCard","MainLayout","getUserPostsRequest","votePostRequest","getConversationsRequest","sendMessageRequest","SendMessageModal","isLogged","User","props","user","posts","conversations","open","setOpen","text","setText","newMessageUser","setUser","onSendMessage","push","isExist","map","item","receiver","id","sender","pathname","query","userId","conversationId","username","handleChange","e","target","value","handleSubmit","payload","receiverId","content","sendMessage","onVote","values","votePost","loaderStart","page","bio","marginTop","flexWrap","paddingBottom","paddingTop","length","mediaContentPath","slug","createdDateTime","contentType","community","linkUrl","voteCount","userPostVote","comments","userName","profileImagePath","emailAddress","getInitialProps","isServer","store","execSagaTasks","dispatch","mapDispatchToProps","getUserPosts","getConversations","mapStateToProps","state","data"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Router, { withRouter } from \"next/router\";\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\nimport SocialCard from \"../../components/SocialCard\";\r\nimport { getUserByUsername } from \"../../lib/users/actions\";\r\nimport UserCard from \"../../components/User/userCard\";\r\nimport MainLayout from \"../../components/mainLayout\";\r\nimport { getUserPostsRequest, votePostRequest } from \"../../lib/posts/actions\";\r\nimport {\r\n  getConversationsRequest,\r\n  sendMessageRequest,\r\n} from \"../../lib/conversation/actions\";\r\nimport SendMessageModal from \"../../components/User/sendMessageModal\";\r\nimport { isLogged } from \"../../lib/helpers\";\r\n\r\nfunction User(props) {\r\n  const { user, posts, conversations } = props;\r\n  const [open, setOpen] = useState(false);\r\n  const [text, setText] = useState(null);\r\n  const [newMessageUser, setUser] = useState({});\r\n\r\n  const onSendMessage = () => {\r\n    if (!isLogged()) {\r\n      Router.push(\"/giris-yap\");\r\n      return;\r\n    }\r\n    let isExist = false;\r\n    conversations.map((item) => {\r\n      if (item.receiver.id == user.id || item.sender.id == user.id) {\r\n        Router.push({\r\n          pathname: \"/chat\",\r\n          query: {\r\n            userId: user.id,\r\n            conversationId: item.id,\r\n            username: user.username,\r\n          },\r\n        });\r\n        isExist = true;\r\n      }\r\n    });\r\n    if (!isExist) {\r\n      setOpen(true);\r\n      setUser({ userId: user.id, username: user.username });\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const payload = { receiverId: newMessageUser.userId, content: text };\r\n    props.sendMessage(payload);\r\n    setOpen(false);\r\n  };\r\n\r\n  const onVote = (values) => {\r\n    const { votePost } = props;\r\n    const payload = {\r\n      ...values,\r\n      loaderStart: false,\r\n      page: \"user\",\r\n      username: user.username,\r\n    };\r\n    votePost(payload);\r\n  };\r\n\r\n  return (\r\n    <MainLayout>\r\n      {user && (\r\n        <Helmet>\r\n          <title>{user.username + \" | Saalla\"}</title>\r\n          <meta charSet=\"utf-8\" />\r\n          <meta name=\"description\" content={user.bio} />\r\n          <link href={`https://saalla.com/${user.username}`} />\r\n        </Helmet>\r\n      )}\r\n      <Container style={{ marginTop: \"8rem\" }}>\r\n        <Row style={{ flexWrap: \"wrap-reverse\" }}>\r\n          <Col\r\n            style={{ paddingBottom: \"10px\", paddingTop: \"20px\" }}\r\n            xs={12}\r\n            md={8}\r\n          >\r\n            {posts &&\r\n              posts.length > 0 &&\r\n              posts.map((item) => (\r\n                <SocialCard\r\n                  id={item.id}\r\n                  img={item.mediaContentPath}\r\n                  pSlug={item.slug}\r\n                  createdDate={item.createdDateTime}\r\n                  content={item.content}\r\n                  contentType={item.contentType}\r\n                  community={item.community}\r\n                  onVote={onVote}\r\n                  linkUrl={item.linkUrl}\r\n                  voteCount={item.voteCount}\r\n                  userPostVote={item.userPostVote}\r\n                  comments={item.comments}\r\n                  user={\r\n                    user && {\r\n                      userName: user.username,\r\n                      profileImagePath: user.profileImagePath,\r\n                    }\r\n                  }\r\n                />\r\n              ))}\r\n          </Col>\r\n          <Col\r\n            style={{ paddingBottom: \"10px\", paddingTop: \"5rem\" }}\r\n            xs={12}\r\n            md={4}\r\n          >\r\n            {user && (\r\n              <UserCard\r\n                img={user.profileImagePath}\r\n                username={user.username}\r\n                email={user.emailAddress}\r\n                id={user.id}\r\n                onMessage={onSendMessage}\r\n                bio={user.bio}\r\n              />\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <SendMessageModal\r\n          onChange={handleChange}\r\n          onSubmit={handleSubmit}\r\n          data={newMessageUser}\r\n          text={text}\r\n          open={open}\r\n          onClose={() => setOpen(false)}\r\n        />\r\n      </Container>\r\n    </MainLayout>\r\n  );\r\n}\r\n\r\nUser.getInitialProps = async ({ isServer, store, query }) => {\r\n  await store.execSagaTasks(isServer, (dispatch) => {\r\n    const { username } = query;\r\n    dispatch(getUserByUsername(username));\r\n    dispatch(getUserPostsRequest({ username }));\r\n    dispatch(getConversationsRequest());\r\n  });\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getUserByUsername: (username) => dispatch(getUserByUsername(username)),\r\n  getUserPosts: (payload) => dispatch(getUserPostsRequest(payload)),\r\n  getConversations: () => dispatch(getConversationsRequest({})),\r\n  sendMessage: (payload) => dispatch(sendMessageRequest(payload)),\r\n  votePost: (payload) => dispatch(votePostRequest(payload)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user.data,\r\n  conversations: state.conversations.data,\r\n  posts: state.posts.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(User));\r\n"]},"metadata":{},"sourceType":"module"}