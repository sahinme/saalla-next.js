{"ast":null,"code":"import { Get, Put } from \"../services\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { GET_UNREADS_FAILURE, GET_UNREADS_REQUEST, GET_UNREADS_SUCCESS, MARK_AS_READ_FAILURE, MARK_AS_READ_REQUEST, MARK_AS_READ_SUCCESS } from \"./actions\";\nimport { readLocalStorage, isLogged } from \"../helpers\";\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\n\nfunction* getUnreadsSaga() {\n  if (isLogged()) {\n    try {\n      yield put({\n        type: LOADER_START\n      });\n      const response = yield call(Get, `message/get-un-reads`, {}, {}, false);\n\n      if (response && !response.error) {\n        yield put({\n          type: GET_UNREADS_SUCCESS,\n          payload: response.count\n        });\n        yield put({\n          type: LOADER_END\n        });\n      } else {\n        yield put({\n          type: GET_UNREADS_FAILURE,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      }\n    } catch (error) {\n      yield put({\n        type: GET_UNREADS_FAILURE,\n        payload: error\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  }\n}\n\nfunction* markAsReadSaga({\n  payload\n}) {\n  try {\n    const ids = [...payload.values];\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Put, `message/mark-as-read`, ids, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: MARK_AS_READ_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: MARK_AS_READ_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: MARK_AS_READ_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put({\n    type: LOADER_END\n  });\n}\n\nexport default function* Saga() {\n  yield takeLatest(GET_UNREADS_REQUEST, getUnreadsSaga);\n  yield takeLatest(MARK_AS_READ_REQUEST, markAsReadSaga);\n}","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/messages/sagas.js"],"names":["Get","Put","call","put","takeLatest","GET_UNREADS_FAILURE","GET_UNREADS_REQUEST","GET_UNREADS_SUCCESS","MARK_AS_READ_FAILURE","MARK_AS_READ_REQUEST","MARK_AS_READ_SUCCESS","readLocalStorage","isLogged","LOADER_START","LOADER_END","getUnreadsSaga","type","response","error","payload","count","markAsReadSaga","ids","values","Saga"],"mappings":"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","sourcesContent":["import { Get, Put } from \"../services\";\r\nimport { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  GET_UNREADS_FAILURE, GET_UNREADS_REQUEST, GET_UNREADS_SUCCESS, MARK_AS_READ_FAILURE, MARK_AS_READ_REQUEST, MARK_AS_READ_SUCCESS\r\n} from \"./actions\";\r\nimport { readLocalStorage, isLogged } from \"../helpers\";\r\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\r\n\r\nfunction* getUnreadsSaga() {\r\n  if (isLogged()) {\r\n    try {\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Get, `message/get-un-reads`, {}, {}, false);\r\n      if (response && !response.error) {\r\n        yield put({ type: GET_UNREADS_SUCCESS, payload: response.count });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: GET_UNREADS_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: GET_UNREADS_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  }\r\n}\r\n\r\nfunction* markAsReadSaga({ payload }) {\r\n  try {\r\n    const ids = [...payload.values];\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Put, `message/mark-as-read`, ids, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: MARK_AS_READ_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: MARK_AS_READ_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: MARK_AS_READ_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put({ type: LOADER_END });\r\n}\r\n\r\nexport default function* Saga() {\r\n  yield takeLatest(GET_UNREADS_REQUEST, getUnreadsSaga);\r\n  yield takeLatest(MARK_AS_READ_REQUEST, markAsReadSaga);\r\n}"]},"metadata":{},"sourceType":"module"}