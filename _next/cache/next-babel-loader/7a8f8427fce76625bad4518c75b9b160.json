{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport { routerReducer, createRouterMiddleware, initialRouterState } from 'connected-next-router';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\nconst sagaMiddleware = createSagaMiddleware();\nconst routerMiddleware = createRouterMiddleware();\n\nconst makeStore = initialState => {\n  // Make exception for redux dev tools\n\n  /* eslint-disable no-underscore-dangle */\n\n  /* eslint-disable no-undef */\n  const composeEnhancers = false && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  /* eslint-enable */\n\n  const middlewares = [sagaMiddleware, routerMiddleware];\n  const store = createStore(combineReducers(_objectSpread(_objectSpread({}, reducers), {}, {\n    router: routerReducer\n  })), initialState, composeEnhancers(applyMiddleware(...middlewares)));\n\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) return;\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga(); // dispatch saga tasks\n\n    tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n    await store.stopSaga(); // Re-run on client side\n\n    if (!isServer) {\n      store.runSaga();\n    }\n  }; // Initial run\n\n\n  store.runSaga();\n  return store;\n};\n\nexport default makeStore;","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/store.js"],"names":["createStore","applyMiddleware","combineReducers","compose","createSagaMiddleware","END","routerReducer","createRouterMiddleware","initialRouterState","reducers","rootSaga","sagaMiddleware","routerMiddleware","makeStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middlewares","store","router","runSaga","saga","run","stopSaga","dispatch","done","execSagaTasks","isServer","tasks"],"mappings":";;;;;;AAAA,SACEA,WADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,OAJF,QAKO,OALP;AAMA,OAAOC,oBAAP,IAA+BC,GAA/B,QAA0C,YAA1C;AACA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,kBAAhD,QAA0E,uBAA1E;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,SAArB;AAEA,MAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AACA,MAAMQ,gBAAgB,GAAGL,sBAAsB,EAA/C;;AAEA,MAAMM,SAAS,GAAIC,YAAD,IAAkB;AAClC;;AACA;;AACA;AACA,QAAMC,gBAAgB,GAAI,SAAiCC,MAAM,CAACC,oCAAzC,IAAkFd,OAA3G;AACA;;AACA,QAAMe,WAAW,GAAG,CAACP,cAAD,EAAiBC,gBAAjB,CAApB;AACA,QAAMO,KAAK,GAAGnB,WAAW,CACvBE,eAAe,iCAAMO,QAAN;AAAgBW,IAAAA,MAAM,EAAEd;AAAxB,KADQ,EAEvBQ,YAFuB,EAGvBC,gBAAgB,CAACd,eAAe,CAAC,GAAGiB,WAAJ,CAAhB,CAHO,CAAzB;;AAQAC,EAAAA,KAAK,CAACE,OAAN,GAAgB,MAAM;AACpB;AACA,QAAIF,KAAK,CAACG,IAAV,EAAgB;AAChBH,IAAAA,KAAK,CAACG,IAAN,GAAaX,cAAc,CAACY,GAAf,CAAmBb,QAAnB,CAAb;AACD,GAJD;;AAMAS,EAAAA,KAAK,CAACK,QAAN,GAAiB,YAAY;AAC3B;AACA,QAAI,CAACL,KAAK,CAACG,IAAX,EAAiB;AACjBH,IAAAA,KAAK,CAACM,QAAN,CAAepB,GAAf;AACA,UAAMc,KAAK,CAACG,IAAN,CAAWI,IAAjB;AACAP,IAAAA,KAAK,CAACG,IAAN,GAAa,IAAb;AACD,GAND;;AAQAH,EAAAA,KAAK,CAACQ,aAAN,GAAsB,OAAOC,QAAP,EAAiBC,KAAjB,KAA2B;AAC/C;AACAV,IAAAA,KAAK,CAACE,OAAN,GAF+C,CAG/C;;AACAQ,IAAAA,KAAK,CAACV,KAAK,CAACM,QAAP,CAAL,CAJ+C,CAK/C;;AACA,UAAMN,KAAK,CAACK,QAAN,EAAN,CAN+C,CAO/C;;AACA,QAAI,CAACI,QAAL,EAAe;AACbT,MAAAA,KAAK,CAACE,OAAN;AACD;AACF,GAXD,CA7BkC,CA0ClC;;;AACAF,EAAAA,KAAK,CAACE,OAAN;AAEA,SAAOF,KAAP;AACD,CA9CD;;AAgDA,eAAeN,SAAf","sourcesContent":["import {\r\n  createStore,\r\n  applyMiddleware,\r\n  combineReducers,\r\n  compose,\r\n} from 'redux';\r\nimport createSagaMiddleware, { END } from 'redux-saga';\r\nimport { routerReducer, createRouterMiddleware, initialRouterState } from 'connected-next-router'\r\n\r\nimport reducers from './reducers';\r\nimport rootSaga from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst routerMiddleware = createRouterMiddleware();\r\n\r\nconst makeStore = (initialState) => {\r\n  // Make exception for redux dev tools\r\n  /* eslint-disable no-underscore-dangle */\r\n  /* eslint-disable no-undef */\r\n  const composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n  /* eslint-enable */\r\n  const middlewares = [sagaMiddleware, routerMiddleware];\r\n  const store = createStore(\r\n    combineReducers({ ...reducers, router: routerReducer }),\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(...middlewares)),\r\n  );\r\n\r\n\r\n\r\n  store.runSaga = () => {\r\n    // Avoid running twice\r\n    if (store.saga) return;\r\n    store.saga = sagaMiddleware.run(rootSaga);\r\n  };\r\n\r\n  store.stopSaga = async () => {\r\n    // Avoid running twice\r\n    if (!store.saga) return;\r\n    store.dispatch(END);\r\n    await store.saga.done;\r\n    store.saga = null;\r\n  };\r\n\r\n  store.execSagaTasks = async (isServer, tasks) => {\r\n    // run saga\r\n    store.runSaga();\r\n    // dispatch saga tasks\r\n    tasks(store.dispatch);\r\n    // Stop running and wait for the tasks to be done\r\n    await store.stopSaga();\r\n    // Re-run on client side\r\n    if (!isServer) {\r\n      store.runSaga();\r\n    }\r\n  };\r\n\r\n  // Initial run\r\n  store.runSaga();\r\n\r\n  return store;\r\n};\r\n\r\nexport default makeStore;\r\n"]},"metadata":{},"sourceType":"module"}