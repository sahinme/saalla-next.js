{"ast":null,"code":"import { AUTH_REQUEST, AUTH_FAILURE, AUTH_SUCCESS, SIGNUP_REQUEST, SIGNUP_SUCCESS, SIGNUP_FAILURE, loginRequest, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE, SEND_RESET_CODE_REQUEST, SEND_RESET_CODE_SUCCESS, SEND_RESET_CODE_FAILURE, RESET_PASSWORD_FAILURE, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS } from \"./actions\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { Post, PostFormData } from \"../services\";\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\nimport { writeLocalStorage, removeLocalStorage } from \"../helpers\";\nimport { LOGIN_ERROR_START, EMAIL_ERROR_START, USERNAME_ERROR_START } from \"../error/actions\";\nimport { toast } from \"react-toastify\";\nimport RollbarErrorTracking from \"../../components/RollbarErrorTracking\";\nimport Router from 'next/router';\nimport { setCookie, destroyCookie } from \"nookies\";\n\nfunction* login({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Post, \"auth/login\", payload, true);\n    console.log(response);\n\n    if (response && response.success) {\n      writeLocalStorage('token', response.token);\n      writeLocalStorage('user', response.user);\n      setCookie(null, 'token', response.token, {\n        maxAge: 10 * 365 * 24 * 60 * 60,\n        path: '/'\n      });\n      yield call(Router.push('/'));\n      yield put({\n        type: AUTH_SUCCESS,\n        payload: response\n      });\n    } else {\n      yield put({\n        type: AUTH_FAILURE,\n        payload: response\n      }); //RollbarErrorTracking.logErroInfo(JSON.stringify(response))\n\n      yield put({\n        type: LOGIN_ERROR_START\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: AUTH_FAILURE,\n      payload: error\n    }); //  RollbarErrorTracking.logErroInfo(JSON.stringify(error))\n\n    yield put({\n      type: LOGIN_ERROR_START\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* signUpSaga({\n  payload\n}) {\n  const values = {\n    username: payload.username,\n    password: payload.password\n  };\n\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(PostFormData, \"user/create-user\", payload, {});\n\n    if (response && !response.error && response.success) {\n      yield put({\n        type: SIGNUP_SUCCESS,\n        payload: response\n      });\n      yield put(loginRequest(values.username, values.password));\n    } else {\n      if (response.emailAddress) {\n        yield put({\n          type: EMAIL_ERROR_START\n        });\n      } else if (response.username) {\n        yield put({\n          type: USERNAME_ERROR_START\n        });\n      } else {\n        RollbarErrorTracking.logErroInfo(JSON.stringify(response));\n      }\n\n      yield put({\n        type: SIGNUP_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n      RollbarErrorTracking.logErroInfo(JSON.stringify(response));\n    }\n  } catch (error) {\n    yield put({\n      type: SIGNUP_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n    RollbarErrorTracking.logErroInfo(JSON.stringify(error));\n  }\n}\n\nfunction* sendResetCodeSaga(payload) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Post, `auth/send-reset-code?emailAddress=${payload.emailAddress}`, {}, {});\n\n    if (response && !response.error && response.status) {\n      yield put({\n        type: SEND_RESET_CODE_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n      toast.success(\"E-postanızı kontrol edin\");\n      yield call(Router.push('/sifre-sifirla'));\n    } else {\n      yield put({\n        type: SEND_RESET_CODE_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: SEND_RESET_CODE_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* resetPasswordSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Post, \"auth/reset-password\", payload, {});\n\n    if (response && !response.error && response.status) {\n      yield put({\n        type: RESET_PASSWORD_SUCCESS,\n        payload: response\n      });\n      toast.success(\"Şifre başarıyla değiştirildi\");\n      yield put({\n        type: LOADER_END\n      });\n      yield call(Router.push('/giris-yap'));\n    } else {\n      yield put({\n        type: RESET_PASSWORD_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: RESET_PASSWORD_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* logOutSaga() {\n  try {\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n    removeLocalStorage(\"token\");\n    removeLocalStorage(\"user\");\n    localStorage.clear();\n    sessionStorage.clear();\n    destroyCookie(null, 'token');\n    yield put({\n      type: \"RESET\"\n    });\n    yield call(Router.push('/giris-yap'));\n  } catch (error) {\n    yield put({\n      type: LOGOUT_FAILURE\n    });\n  }\n}\n\nexport default function* Saga() {\n  yield takeLatest(AUTH_REQUEST, login);\n  yield takeLatest(SIGNUP_REQUEST, signUpSaga);\n  yield takeLatest(LOGOUT_REQUEST, logOutSaga);\n  yield takeLatest(SEND_RESET_CODE_REQUEST, sendResetCodeSaga);\n  yield takeLatest(RESET_PASSWORD_REQUEST, resetPasswordSaga);\n}","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/auth/sagas.js"],"names":["AUTH_REQUEST","AUTH_FAILURE","AUTH_SUCCESS","SIGNUP_REQUEST","SIGNUP_SUCCESS","SIGNUP_FAILURE","loginRequest","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","SEND_RESET_CODE_REQUEST","SEND_RESET_CODE_SUCCESS","SEND_RESET_CODE_FAILURE","RESET_PASSWORD_FAILURE","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","call","put","takeLatest","Post","PostFormData","LOADER_START","LOADER_END","writeLocalStorage","removeLocalStorage","LOGIN_ERROR_START","EMAIL_ERROR_START","USERNAME_ERROR_START","toast","RollbarErrorTracking","Router","setCookie","destroyCookie","login","payload","type","response","console","log","success","token","user","maxAge","path","push","error","signUpSaga","values","username","password","emailAddress","logErroInfo","JSON","stringify","sendResetCodeSaga","status","resetPasswordSaga","logOutSaga","localStorage","clear","sessionStorage","Saga"],"mappings":"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","sourcesContent":["import {\r\n    AUTH_REQUEST, AUTH_FAILURE, AUTH_SUCCESS, SIGNUP_REQUEST, SIGNUP_SUCCESS, SIGNUP_FAILURE,\r\n    loginRequest, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE,\r\n    SEND_RESET_CODE_REQUEST, SEND_RESET_CODE_SUCCESS, SEND_RESET_CODE_FAILURE,\r\n    RESET_PASSWORD_FAILURE, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS\r\n} from \"./actions\";\r\nimport { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { Post, PostFormData } from \"../services\";\r\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\r\nimport { writeLocalStorage, removeLocalStorage } from \"../helpers\";\r\nimport { LOGIN_ERROR_START, EMAIL_ERROR_START, USERNAME_ERROR_START } from \"../error/actions\";\r\nimport { toast } from \"react-toastify\";\r\nimport RollbarErrorTracking from \"../../components/RollbarErrorTracking\";\r\nimport Router from 'next/router'\r\nimport { setCookie, destroyCookie } from \"nookies\";\r\n\r\nfunction* login({ payload }) {\r\n    try {\r\n        yield put({ type: LOADER_START });\r\n        const response = yield call(Post, \"auth/login\", payload, true);\r\n        console.log(response);\r\n        if (response && response.success) {\r\n            writeLocalStorage('token', response.token);\r\n            writeLocalStorage('user', response.user);\r\n            setCookie(null, 'token', response.token, {\r\n                maxAge: 10 * 365 * 24 * 60 * 60,\r\n                path: '/',\r\n            })\r\n            yield call(Router.push('/'))\r\n            yield put({ type: AUTH_SUCCESS, payload: response });\r\n        } else {\r\n            yield put({ type: AUTH_FAILURE, payload: response });\r\n            //RollbarErrorTracking.logErroInfo(JSON.stringify(response))\r\n            yield put({ type: LOGIN_ERROR_START });\r\n            yield put({ type: LOADER_END });\r\n        }\r\n    } catch (error) {\r\n        yield put({ type: AUTH_FAILURE, payload: error });\r\n        //  RollbarErrorTracking.logErroInfo(JSON.stringify(error))\r\n        yield put({ type: LOGIN_ERROR_START });\r\n        yield put({ type: LOADER_END });\r\n    }\r\n}\r\n\r\nfunction* signUpSaga({ payload }) {\r\n    const values = { username: payload.username, password: payload.password };\r\n    try {\r\n        yield put({ type: LOADER_START });\r\n        const response = yield call(PostFormData, \"user/create-user\", payload, {});\r\n        if (response && !response.error && response.success) {\r\n            yield put({ type: SIGNUP_SUCCESS, payload: response });\r\n            yield put(loginRequest(values.username, values.password));\r\n        } else {\r\n            if (response.emailAddress) {\r\n                yield put({ type: EMAIL_ERROR_START })\r\n            } else if (response.username) {\r\n                yield put({ type: USERNAME_ERROR_START });\r\n            } else {\r\n                RollbarErrorTracking.logErroInfo(JSON.stringify(response))\r\n            }\r\n            yield put({ type: SIGNUP_FAILURE, payload: response });\r\n            yield put({ type: LOADER_END });\r\n            RollbarErrorTracking.logErroInfo(JSON.stringify(response))\r\n        }\r\n    } catch (error) {\r\n        yield put({ type: SIGNUP_FAILURE, payload: error });\r\n        yield put({ type: LOADER_END });\r\n        RollbarErrorTracking.logErroInfo(JSON.stringify(error))\r\n    }\r\n}\r\n\r\nfunction* sendResetCodeSaga(payload) {\r\n    try {\r\n        yield put({ type: LOADER_START });\r\n        const response = yield call(Post, `auth/send-reset-code?emailAddress=${payload.emailAddress}`, {}, {});\r\n        if (response && !response.error && response.status) {\r\n            yield put({ type: SEND_RESET_CODE_SUCCESS, payload: response });\r\n            yield put({ type: LOADER_END });\r\n            toast.success(\"E-postanızı kontrol edin\")\r\n            yield call(Router.push('/sifre-sifirla'))\r\n        } else {\r\n            yield put({ type: SEND_RESET_CODE_FAILURE, payload: response });\r\n            yield put({ type: LOADER_END });\r\n        }\r\n    } catch (error) {\r\n        yield put({ type: SEND_RESET_CODE_FAILURE, payload: error });\r\n        yield put({ type: LOADER_END });\r\n    }\r\n}\r\n\r\nfunction* resetPasswordSaga({ payload }) {\r\n    try {\r\n        yield put({ type: LOADER_START });\r\n        const response = yield call(Post, \"auth/reset-password\", payload, {});\r\n        if (response && !response.error && response.status) {\r\n            yield put({ type: RESET_PASSWORD_SUCCESS, payload: response });\r\n            toast.success(\"Şifre başarıyla değiştirildi\")\r\n            yield put({ type: LOADER_END });\r\n            yield call(Router.push('/giris-yap'))\r\n        } else {\r\n            yield put({ type: RESET_PASSWORD_FAILURE, payload: response });\r\n            yield put({ type: LOADER_END });\r\n        }\r\n    } catch (error) {\r\n        yield put({ type: RESET_PASSWORD_FAILURE, payload: error });\r\n        yield put({ type: LOADER_END });\r\n    }\r\n}\r\n\r\nfunction* logOutSaga() {\r\n    try {\r\n        yield put({ type: LOGOUT_SUCCESS });\r\n        removeLocalStorage(\"token\");\r\n        removeLocalStorage(\"user\");\r\n        localStorage.clear();\r\n        sessionStorage.clear();\r\n        destroyCookie(null, 'token')\r\n        yield put({ type: \"RESET\" });\r\n        yield call(Router.push('/giris-yap'))\r\n    } catch (error) {\r\n        yield put({ type: LOGOUT_FAILURE });\r\n    }\r\n}\r\n\r\nexport default function* Saga() {\r\n    yield takeLatest(AUTH_REQUEST, login);\r\n    yield takeLatest(SIGNUP_REQUEST, signUpSaga);\r\n    yield takeLatest(LOGOUT_REQUEST, logOutSaga);\r\n    yield takeLatest(SEND_RESET_CODE_REQUEST, sendResetCodeSaga);\r\n    yield takeLatest(RESET_PASSWORD_REQUEST, resetPasswordSaga);\r\n}"]},"metadata":{},"sourceType":"module"}