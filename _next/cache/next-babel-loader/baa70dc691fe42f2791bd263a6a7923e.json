{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Get, Post, PutFormData, Delete } from \"../services\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { GET_POPULAR_LIST_SUCCESS, GET_POPULAR_LIST_FAILURE, GET_POPULAR_LIST_REQUEST, GET_COMMUNITY_FAILURE, GET_COMMUNITY_REQUEST, GET_COMMUNITY_SUCCESS, GET_USER_COMMUNITIES_REQUEST, GET_USER_COMMUNITIES_SUCCESS, GET_USER_COMMUNITIES_FAILURE, OF_MODERATORS_FAILURE, OF_MODERATORS_REQUEST, OF_MODERATORS_SUCCESS, UPDATE_COMMUNITY_SUCCESS, UPDATE_COMMUNITY_FAILURE, UPDATE_COMMUNITY_REQUEST, getCommunityRequest, GET_USERS_FAILURE, GET_USERS_REQUEST, GET_USERS_SUCCESS, DELETE_USER_SUCCESS, DELETE_USER_FAILURE, DELETE_USER_REQUEST, getUsers, GET_ALL_COMMUNITY_REQUEST, GET_ALL_COMMUNITY_SUCCESS, GET_ALL_COMMUNITY_FAILURE, GET_COMMUNITY_POSTS_FAILURE, GET_COMMUNITY_POSTS_REQUEST, GET_COMMUNITY_POSTS_SUCCESS } from \"./actions\";\nimport { readLocalStorage, isLogged } from \"../helpers\";\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\n\nfunction* getPopularListSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Get, \"community/get-populars\", payload, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: GET_POPULAR_LIST_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: GET_POPULAR_LIST_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: GET_POPULAR_LIST_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* getCommunitySaga({\n  payload\n}) {\n  try {\n    const url = `community/get?slug=${payload.slug}`;\n\n    if (payload.loaderStart) {\n      yield put({\n        type: LOADER_START\n      });\n    }\n\n    const response = yield call(Get, url, {}, payload.token, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: GET_COMMUNITY_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: GET_COMMUNITY_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: GET_COMMUNITY_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* getCommunityPostsSaga({\n  payload\n}) {\n  try {\n    const {\n      pageNumber,\n      pageSize,\n      slug,\n      token\n    } = payload;\n\n    if (payload.loaderStart) {\n      yield put({\n        type: LOADER_START\n      });\n    }\n\n    const response = yield call(Get, `community/get-posts?slug=${slug}&PageNumber=${pageNumber}&PageSize=${pageSize}`, {}, token, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: GET_COMMUNITY_POSTS_SUCCESS,\n        payload: _objectSpread(_objectSpread({}, response), {}, {\n          isVoted: payload.isVoted\n        })\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: GET_COMMUNITY_POSTS_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: GET_COMMUNITY_POSTS_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* getUserCommunitiesSaga({\n  payload\n}) {\n  if (isLogged()) {\n    try {\n      yield put({\n        type: LOADER_START\n      });\n      const response = yield call(Get, `user/get-user-communities`, {}, {}, false);\n\n      if (response && !response.error) {\n        yield put({\n          type: GET_USER_COMMUNITIES_SUCCESS,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      } else {\n        yield put({\n          type: GET_USER_COMMUNITIES_FAILURE,\n          payload: response\n        });\n        yield put({\n          type: LOADER_END\n        });\n      }\n    } catch (error) {\n      yield put({\n        type: GET_USER_COMMUNITIES_FAILURE,\n        payload: error\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  }\n}\n\nfunction* ofModeratorsSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Get, `community/of-moderators`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: OF_MODERATORS_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: OF_MODERATORS_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: OF_MODERATORS_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* getUsersSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Get, `community/users?slug=${payload.slug}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: GET_USERS_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: GET_USERS_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: GET_USERS_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nfunction* deleteUserSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Delete, `user/moderator-rejected-join`, payload, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: DELETE_USER_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: DELETE_USER_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: DELETE_USER_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getCommunityRequest({\n    slug: payload.slug\n  }));\n  yield put(getUsers({\n    slug: payload.slug\n  }));\n}\n\nfunction* updateCommunity({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(PutFormData, `community/update`, payload, {});\n\n    if (response && !response.error) {\n      yield put({\n        type: UPDATE_COMMUNITY_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: UPDATE_COMMUNITY_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: UPDATE_COMMUNITY_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getCommunityRequest({\n    slug: payload.slug\n  }));\n}\n\nfunction* getAllSaga() {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Get, `community/get-all`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: GET_ALL_COMMUNITY_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: GET_ALL_COMMUNITY_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: GET_ALL_COMMUNITY_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n}\n\nexport default function* Saga() {\n  yield takeLatest(GET_POPULAR_LIST_REQUEST, getPopularListSaga);\n  yield takeLatest(GET_COMMUNITY_REQUEST, getCommunitySaga);\n  yield takeLatest(GET_USER_COMMUNITIES_REQUEST, getUserCommunitiesSaga);\n  yield takeLatest(OF_MODERATORS_REQUEST, ofModeratorsSaga);\n  yield takeLatest(UPDATE_COMMUNITY_REQUEST, updateCommunity);\n  yield takeLatest(GET_USERS_REQUEST, getUsersSaga);\n  yield takeLatest(DELETE_USER_REQUEST, deleteUserSaga);\n  yield takeLatest(GET_ALL_COMMUNITY_REQUEST, getAllSaga);\n  yield takeLatest(GET_COMMUNITY_POSTS_REQUEST, getCommunityPostsSaga);\n}","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/community/sagas.js"],"names":["Get","Post","PutFormData","Delete","call","put","takeLatest","GET_POPULAR_LIST_SUCCESS","GET_POPULAR_LIST_FAILURE","GET_POPULAR_LIST_REQUEST","GET_COMMUNITY_FAILURE","GET_COMMUNITY_REQUEST","GET_COMMUNITY_SUCCESS","GET_USER_COMMUNITIES_REQUEST","GET_USER_COMMUNITIES_SUCCESS","GET_USER_COMMUNITIES_FAILURE","OF_MODERATORS_FAILURE","OF_MODERATORS_REQUEST","OF_MODERATORS_SUCCESS","UPDATE_COMMUNITY_SUCCESS","UPDATE_COMMUNITY_FAILURE","UPDATE_COMMUNITY_REQUEST","getCommunityRequest","GET_USERS_FAILURE","GET_USERS_REQUEST","GET_USERS_SUCCESS","DELETE_USER_SUCCESS","DELETE_USER_FAILURE","DELETE_USER_REQUEST","getUsers","GET_ALL_COMMUNITY_REQUEST","GET_ALL_COMMUNITY_SUCCESS","GET_ALL_COMMUNITY_FAILURE","GET_COMMUNITY_POSTS_FAILURE","GET_COMMUNITY_POSTS_REQUEST","GET_COMMUNITY_POSTS_SUCCESS","readLocalStorage","isLogged","LOADER_START","LOADER_END","getPopularListSaga","payload","type","response","error","getCommunitySaga","url","slug","loaderStart","token","getCommunityPostsSaga","pageNumber","pageSize","isVoted","console","log","getUserCommunitiesSaga","ofModeratorsSaga","getUsersSaga","deleteUserSaga","updateCommunity","getAllSaga","Saga"],"mappings":"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","sourcesContent":["import { Get, Post, PutFormData, Delete } from \"../services\";\r\nimport { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  GET_POPULAR_LIST_SUCCESS, GET_POPULAR_LIST_FAILURE, GET_POPULAR_LIST_REQUEST,\r\n  GET_COMMUNITY_FAILURE, GET_COMMUNITY_REQUEST, GET_COMMUNITY_SUCCESS,\r\n  GET_USER_COMMUNITIES_REQUEST, GET_USER_COMMUNITIES_SUCCESS, GET_USER_COMMUNITIES_FAILURE,\r\n  OF_MODERATORS_FAILURE, OF_MODERATORS_REQUEST, OF_MODERATORS_SUCCESS, UPDATE_COMMUNITY_SUCCESS,\r\n  UPDATE_COMMUNITY_FAILURE, UPDATE_COMMUNITY_REQUEST, getCommunityRequest,\r\n  GET_USERS_FAILURE, GET_USERS_REQUEST, GET_USERS_SUCCESS, DELETE_USER_SUCCESS,\r\n  DELETE_USER_FAILURE, DELETE_USER_REQUEST, getUsers,\r\n  GET_ALL_COMMUNITY_REQUEST, GET_ALL_COMMUNITY_SUCCESS, GET_ALL_COMMUNITY_FAILURE,\r\n  GET_COMMUNITY_POSTS_FAILURE, GET_COMMUNITY_POSTS_REQUEST, GET_COMMUNITY_POSTS_SUCCESS\r\n} from \"./actions\";\r\nimport { readLocalStorage, isLogged } from \"../helpers\";\r\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\r\n\r\nfunction* getPopularListSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Get, \"community/get-populars\", payload, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: GET_POPULAR_LIST_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: GET_POPULAR_LIST_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: GET_POPULAR_LIST_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* getCommunitySaga({ payload }) {\r\n  try {\r\n    const url = `community/get?slug=${payload.slug}`\r\n    if (payload.loaderStart) {\r\n      yield put({ type: LOADER_START });\r\n\r\n    }\r\n    const response = yield call(Get, url, {}, payload.token, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: GET_COMMUNITY_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: GET_COMMUNITY_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: GET_COMMUNITY_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* getCommunityPostsSaga({ payload }) {\r\n  try {\r\n    const { pageNumber, pageSize, slug, token } = payload;\r\n    if (payload.loaderStart) {\r\n      yield put({ type: LOADER_START });\r\n    }\r\n    const response = yield call(Get, `community/get-posts?slug=${slug}&PageNumber=${pageNumber}&PageSize=${pageSize}`, {}, token, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: GET_COMMUNITY_POSTS_SUCCESS, payload: { ...response, isVoted: payload.isVoted } });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: GET_COMMUNITY_POSTS_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put({ type: GET_COMMUNITY_POSTS_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* getUserCommunitiesSaga({ payload }) {\r\n  if (isLogged()) {\r\n    try {\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Get, `user/get-user-communities`, {}, {}, false);\r\n      if (response && !response.error) {\r\n        yield put({ type: GET_USER_COMMUNITIES_SUCCESS, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: GET_USER_COMMUNITIES_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: GET_USER_COMMUNITIES_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  }\r\n}\r\n\r\nfunction* ofModeratorsSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Get, `community/of-moderators`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: OF_MODERATORS_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: OF_MODERATORS_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: OF_MODERATORS_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\n\r\nfunction* getUsersSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Get, `community/users?slug=${payload.slug}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: GET_USERS_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: GET_USERS_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: GET_USERS_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* deleteUserSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Delete, `user/moderator-rejected-join`, payload, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: DELETE_USER_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: DELETE_USER_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: DELETE_USER_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getCommunityRequest({ slug: payload.slug }));\r\n  yield put(getUsers({ slug: payload.slug }));\r\n}\r\n\r\nfunction* updateCommunity({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(PutFormData, `community/update`, payload, {});\r\n    if (response && !response.error) {\r\n      yield put({ type: UPDATE_COMMUNITY_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: UPDATE_COMMUNITY_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: UPDATE_COMMUNITY_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getCommunityRequest({ slug: payload.slug }));\r\n}\r\n\r\nfunction* getAllSaga() {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Get, `community/get-all`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: GET_ALL_COMMUNITY_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: GET_ALL_COMMUNITY_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: GET_ALL_COMMUNITY_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nexport default function* Saga() {\r\n  yield takeLatest(GET_POPULAR_LIST_REQUEST, getPopularListSaga);\r\n  yield takeLatest(GET_COMMUNITY_REQUEST, getCommunitySaga);\r\n  yield takeLatest(GET_USER_COMMUNITIES_REQUEST, getUserCommunitiesSaga);\r\n  yield takeLatest(OF_MODERATORS_REQUEST, ofModeratorsSaga);\r\n  yield takeLatest(UPDATE_COMMUNITY_REQUEST, updateCommunity);\r\n  yield takeLatest(GET_USERS_REQUEST, getUsersSaga);\r\n  yield takeLatest(DELETE_USER_REQUEST, deleteUserSaga);\r\n  yield takeLatest(GET_ALL_COMMUNITY_REQUEST, getAllSaga);\r\n  yield takeLatest(GET_COMMUNITY_POSTS_REQUEST, getCommunityPostsSaga);\r\n}"]},"metadata":{},"sourceType":"module"}