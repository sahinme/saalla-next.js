{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport { routerReducer, createRouterMiddleware, initialRouterState } from 'connected-next-router';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\nvar sagaMiddleware = createSagaMiddleware();\nvar routerMiddleware = createRouterMiddleware();\n\nvar makeStore = function makeStore(initialState) {\n  // Make exception for redux dev tools\n\n  /* eslint-disable no-underscore-dangle */\n\n  /* eslint-disable no-undef */\n  var composeEnhancers = true && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  /* eslint-enable */\n\n  var middlewares = [sagaMiddleware, routerMiddleware];\n  var store = createStore(combineReducers(_objectSpread(_objectSpread({}, reducers), {}, {\n    router: routerReducer\n  })), initialState, composeEnhancers(applyMiddleware.apply(void 0, middlewares)));\n\n  store.runSaga = function () {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (store.saga) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            store.dispatch(END);\n            _context.next = 5;\n            return store.saga.done;\n\n          case 5:\n            store.saga = null;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  store.execSagaTasks = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(isServer, tasks) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // run saga\n              store.runSaga(); // dispatch saga tasks\n\n              tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n              _context2.next = 4;\n              return store.stopSaga();\n\n            case 4:\n              // Re-run on client side\n              if (!isServer) {\n                store.runSaga();\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Initial run\n\n\n  store.runSaga();\n  return store;\n};\n\nexport default makeStore;","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/store.js"],"names":["createStore","applyMiddleware","combineReducers","compose","createSagaMiddleware","END","routerReducer","createRouterMiddleware","initialRouterState","reducers","rootSaga","sagaMiddleware","routerMiddleware","makeStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middlewares","store","router","runSaga","saga","run","stopSaga","dispatch","done","execSagaTasks","isServer","tasks"],"mappings":";;;;;;;;AAAA,SACEA,WADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,OAJF,QAKO,OALP;AAMA,OAAOC,oBAAP,IAA+BC,GAA/B,QAA0C,YAA1C;AACA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,kBAAhD,QAA0E,uBAA1E;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,SAArB;AAEA,IAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AACA,IAAMQ,gBAAgB,GAAGL,sBAAsB,EAA/C;;AAEA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAACC,YAAD,EAAkB;AAClC;;AACA;;AACA;AACA,MAAMC,gBAAgB,GAAI,QAAiCC,MAAM,CAACC,oCAAzC,IAAkFd,OAA3G;AACA;;AACA,MAAMe,WAAW,GAAG,CAACP,cAAD,EAAiBC,gBAAjB,CAApB;AACA,MAAMO,KAAK,GAAGnB,WAAW,CACvBE,eAAe,iCAAMO,QAAN;AAAgBW,IAAAA,MAAM,EAAEd;AAAxB,KADQ,EAEvBQ,YAFuB,EAGvBC,gBAAgB,CAACd,eAAe,MAAf,SAAmBiB,WAAnB,CAAD,CAHO,CAAzB;;AAQAC,EAAAA,KAAK,CAACE,OAAN,GAAgB,YAAM;AACpB;AACA,QAAIF,KAAK,CAACG,IAAV,EAAgB;AAChBH,IAAAA,KAAK,CAACG,IAAN,GAAaX,cAAc,CAACY,GAAf,CAAmBb,QAAnB,CAAb;AACD,GAJD;;AAMAS,EAAAA,KAAK,CAACK,QAAN,yEAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEVL,KAAK,CAACG,IAFI;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGfH,YAAAA,KAAK,CAACM,QAAN,CAAepB,GAAf;AAHe;AAAA,mBAITc,KAAK,CAACG,IAAN,CAAWI,IAJF;;AAAA;AAKfP,YAAAA,KAAK,CAACG,IAAN,GAAa,IAAb;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAQAH,EAAAA,KAAK,CAACQ,aAAN;AAAA,yEAAsB,kBAAOC,QAAP,EAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA;AACpB;AACAV,cAAAA,KAAK,CAACE,OAAN,GAFoB,CAGpB;;AACAQ,cAAAA,KAAK,CAACV,KAAK,CAACM,QAAP,CAAL,CAJoB,CAKpB;;AALoB;AAAA,qBAMdN,KAAK,CAACK,QAAN,EANc;;AAAA;AAOpB;AACA,kBAAI,CAACI,QAAL,EAAe;AACbT,gBAAAA,KAAK,CAACE,OAAN;AACD;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA,MA7BkC,CA0ClC;;;AACAF,EAAAA,KAAK,CAACE,OAAN;AAEA,SAAOF,KAAP;AACD,CA9CD;;AAgDA,eAAeN,SAAf","sourcesContent":["import {\r\n  createStore,\r\n  applyMiddleware,\r\n  combineReducers,\r\n  compose,\r\n} from 'redux';\r\nimport createSagaMiddleware, { END } from 'redux-saga';\r\nimport { routerReducer, createRouterMiddleware, initialRouterState } from 'connected-next-router'\r\n\r\nimport reducers from './reducers';\r\nimport rootSaga from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst routerMiddleware = createRouterMiddleware();\r\n\r\nconst makeStore = (initialState) => {\r\n  // Make exception for redux dev tools\r\n  /* eslint-disable no-underscore-dangle */\r\n  /* eslint-disable no-undef */\r\n  const composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n  /* eslint-enable */\r\n  const middlewares = [sagaMiddleware, routerMiddleware];\r\n  const store = createStore(\r\n    combineReducers({ ...reducers, router: routerReducer }),\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(...middlewares)),\r\n  );\r\n\r\n\r\n\r\n  store.runSaga = () => {\r\n    // Avoid running twice\r\n    if (store.saga) return;\r\n    store.saga = sagaMiddleware.run(rootSaga);\r\n  };\r\n\r\n  store.stopSaga = async () => {\r\n    // Avoid running twice\r\n    if (!store.saga) return;\r\n    store.dispatch(END);\r\n    await store.saga.done;\r\n    store.saga = null;\r\n  };\r\n\r\n  store.execSagaTasks = async (isServer, tasks) => {\r\n    // run saga\r\n    store.runSaga();\r\n    // dispatch saga tasks\r\n    tasks(store.dispatch);\r\n    // Stop running and wait for the tasks to be done\r\n    await store.stopSaga();\r\n    // Re-run on client side\r\n    if (!isServer) {\r\n      store.runSaga();\r\n    }\r\n  };\r\n\r\n  // Initial run\r\n  store.runSaga();\r\n\r\n  return store;\r\n};\r\n\r\nexport default makeStore;\r\n"]},"metadata":{},"sourceType":"module"}