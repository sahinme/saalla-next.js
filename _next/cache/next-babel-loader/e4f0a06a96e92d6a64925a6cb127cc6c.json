{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getNotificationsSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getCountSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(markAsReadSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(Saga);\n\nimport { Get, Put } from \"../services\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { eventChannel } from 'redux-saga';\nimport { GET_NOTIFICATIONS_FAILURE, GET_NOTIFICATIONS_REQUEST, GET_NOTIFICATIONS_SUCCESS, MARK_AS_READ_SUCCESS, MARK_AS_READ_FAILURE, MARK_AS_READ_REQUEST, GET_COUNT_SUCCESS, GET_COUNT_FAILURE, GET_COUNT_REQUEST } from './actions';\nimport { readLocalStorage, isLogged } from '../helpers';\nimport { LOADER_END, LOADER_START } from \"../loader/actions\";\nimport { toast } from \"react-toastify\";\n\nfunction getNotificationsSaga(_ref) {\n  var payload, response;\n  return _regeneratorRuntime.wrap(function getNotificationsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n\n          if (!isLogged()) {\n            _context.next = 29;\n            break;\n          }\n\n          _context.prev = 2;\n          _context.next = 5;\n          return put({\n            type: LOADER_START\n          });\n\n        case 5:\n          _context.next = 7;\n          return call(Get, \"notification/get-user\", {}, {});\n\n        case 7:\n          response = _context.sent;\n\n          if (!(response && !response.error)) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 11;\n          return put({\n            type: GET_NOTIFICATIONS_SUCCESS,\n            payload: response\n          });\n\n        case 11:\n          _context.next = 13;\n          return put({\n            type: LOADER_END\n          });\n\n        case 13:\n          _context.next = 19;\n          break;\n\n        case 15:\n          _context.next = 17;\n          return put({\n            type: GET_NOTIFICATIONS_FAILURE,\n            payload: response\n          });\n\n        case 17:\n          _context.next = 19;\n          return put({\n            type: LOADER_END\n          });\n\n        case 19:\n          _context.next = 27;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 25;\n          return put({\n            type: GET_NOTIFICATIONS_FAILURE,\n            payload: _context.t0\n          });\n\n        case 25:\n          _context.next = 27;\n          return put({\n            type: LOADER_END\n          });\n\n        case 27:\n          _context.next = 29;\n          return put({\n            type: LOADER_END\n          });\n\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 21]]);\n}\n\nfunction getCountSaga() {\n  var response;\n  return _regeneratorRuntime.wrap(function getCountSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!isLogged()) {\n            _context2.next = 28;\n            break;\n          }\n\n          _context2.prev = 1;\n          _context2.next = 4;\n          return put({\n            type: LOADER_START\n          });\n\n        case 4:\n          _context2.next = 6;\n          return call(Get, \"notification/get-count\", {}, {});\n\n        case 6:\n          response = _context2.sent;\n\n          if (!(response && !response.error)) {\n            _context2.next = 14;\n            break;\n          }\n\n          _context2.next = 10;\n          return put({\n            type: GET_COUNT_SUCCESS,\n            payload: response\n          });\n\n        case 10:\n          _context2.next = 12;\n          return put({\n            type: LOADER_END\n          });\n\n        case 12:\n          _context2.next = 18;\n          break;\n\n        case 14:\n          _context2.next = 16;\n          return put({\n            type: GET_COUNT_FAILURE,\n            payload: response\n          });\n\n        case 16:\n          _context2.next = 18;\n          return put({\n            type: LOADER_END\n          });\n\n        case 18:\n          _context2.next = 26;\n          break;\n\n        case 20:\n          _context2.prev = 20;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 24;\n          return put({\n            type: GET_COUNT_FAILURE,\n            payload: _context2.t0\n          });\n\n        case 24:\n          _context2.next = 26;\n          return put({\n            type: LOADER_END\n          });\n\n        case 26:\n          _context2.next = 28;\n          return put({\n            type: LOADER_END\n          });\n\n        case 28:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 20]]);\n}\n\nfunction markAsReadSaga(_ref2) {\n  var payload, ids, response;\n  return _regeneratorRuntime.wrap(function markAsReadSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref2.payload;\n\n          if (!isLogged()) {\n            _context3.next = 30;\n            break;\n          }\n\n          _context3.prev = 2;\n          ids = _toConsumableArray(payload.values);\n          _context3.next = 6;\n          return put({\n            type: LOADER_START\n          });\n\n        case 6:\n          _context3.next = 8;\n          return call(Put, \"notification/mark-as-read\", ids, {}, false);\n\n        case 8:\n          response = _context3.sent;\n\n          if (!(response && !response.error)) {\n            _context3.next = 16;\n            break;\n          }\n\n          _context3.next = 12;\n          return put({\n            type: MARK_AS_READ_SUCCESS,\n            payload: response\n          });\n\n        case 12:\n          _context3.next = 14;\n          return put({\n            type: LOADER_END\n          });\n\n        case 14:\n          _context3.next = 20;\n          break;\n\n        case 16:\n          _context3.next = 18;\n          return put({\n            type: MARK_AS_READ_FAILURE,\n            payload: response\n          });\n\n        case 18:\n          _context3.next = 20;\n          return put({\n            type: LOADER_END\n          });\n\n        case 20:\n          _context3.next = 28;\n          break;\n\n        case 22:\n          _context3.prev = 22;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.next = 26;\n          return put({\n            type: MARK_AS_READ_FAILURE,\n            payload: _context3.t0\n          });\n\n        case 26:\n          _context3.next = 28;\n          return put({\n            type: LOADER_END\n          });\n\n        case 28:\n          _context3.next = 30;\n          return put({\n            type: LOADER_END\n          });\n\n        case 30:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 22]]);\n}\n\nexport default function Saga() {\n  return _regeneratorRuntime.wrap(function Saga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(GET_NOTIFICATIONS_REQUEST, getNotificationsSaga);\n\n        case 2:\n          _context4.next = 4;\n          return takeLatest(MARK_AS_READ_REQUEST, markAsReadSaga);\n\n        case 4:\n          _context4.next = 6;\n          return takeLatest(GET_COUNT_REQUEST, getCountSaga);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n_c = Saga;\n\nvar _c;\n\n$RefreshReg$(_c, \"Saga\");","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/notifications/sagas.js"],"names":["getNotificationsSaga","getCountSaga","markAsReadSaga","Saga","Get","Put","call","put","takeLatest","eventChannel","GET_NOTIFICATIONS_FAILURE","GET_NOTIFICATIONS_REQUEST","GET_NOTIFICATIONS_SUCCESS","MARK_AS_READ_SUCCESS","MARK_AS_READ_FAILURE","MARK_AS_READ_REQUEST","GET_COUNT_SUCCESS","GET_COUNT_FAILURE","GET_COUNT_REQUEST","readLocalStorage","isLogged","LOADER_END","LOADER_START","toast","payload","type","response","error","ids","values"],"mappings":"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","sourcesContent":["import { Get, Put } from \"../services\";\r\nimport { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { eventChannel } from 'redux-saga';\r\nimport { GET_NOTIFICATIONS_FAILURE, GET_NOTIFICATIONS_REQUEST, GET_NOTIFICATIONS_SUCCESS, MARK_AS_READ_SUCCESS, MARK_AS_READ_FAILURE, MARK_AS_READ_REQUEST, GET_COUNT_SUCCESS, GET_COUNT_FAILURE, GET_COUNT_REQUEST } from './actions';\r\nimport { readLocalStorage, isLogged } from '../helpers';\r\nimport { LOADER_END, LOADER_START } from \"../loader/actions\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nfunction* getNotificationsSaga({ payload }) {\r\n  if (isLogged()) {\r\n    try {\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Get, `notification/get-user`, {}, {});\r\n      if (response && !response.error) {\r\n        yield put({ type: GET_NOTIFICATIONS_SUCCESS, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: GET_NOTIFICATIONS_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: GET_NOTIFICATIONS_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* getCountSaga() {\r\n  if (isLogged()) {\r\n    try {\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Get, `notification/get-count`, {}, {});\r\n      if (response && !response.error) {\r\n        yield put({ type: GET_COUNT_SUCCESS, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: GET_COUNT_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: GET_COUNT_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\nfunction* markAsReadSaga({ payload }) {\r\n  if (isLogged()) {\r\n    try {\r\n      const ids = [...payload.values];\r\n      yield put({ type: LOADER_START });\r\n      const response = yield call(Put, `notification/mark-as-read`, ids, {}, false);\r\n      if (response && !response.error) {\r\n        yield put({ type: MARK_AS_READ_SUCCESS, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      } else {\r\n        yield put({ type: MARK_AS_READ_FAILURE, payload: response });\r\n        yield put({ type: LOADER_END });\r\n      }\r\n    } catch (error) {\r\n      yield put({ type: MARK_AS_READ_FAILURE, payload: error });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n    yield put({ type: LOADER_END });\r\n  }\r\n}\r\n\r\n\r\nexport default function* Saga() {\r\n  yield takeLatest(GET_NOTIFICATIONS_REQUEST, getNotificationsSaga);\r\n  yield takeLatest(MARK_AS_READ_REQUEST, markAsReadSaga);\r\n  yield takeLatest(GET_COUNT_REQUEST, getCountSaga);\r\n}"]},"metadata":{},"sourceType":"module"}