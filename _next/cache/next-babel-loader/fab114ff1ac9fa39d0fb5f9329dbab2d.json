{"ast":null,"code":"import { Get, Post, Delete } from \"../services\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { CREATE_COMMENT_FAILURE, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, CREATE_REPLY_FAILURE, CREATE_REPLY_REQUEST, CREATE_REPLY_SUCCESS, LIKE_COMMENT_SUCCESS, LIKE_COMMENT_FAILURE, LIKE_COMMENT_REQUEST, UNLIKE_COMMENT_SUCCESS, UNLIKE_COMMENT_FAILURE, UNLIKE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, DELETE_COMMENT_REQUEST, DELETE_COMMENT_MODERATOR_SUCCESS, DELETE_COMMENT_MODERATOR_FAILURE, DELETE_COMMENT_MODERATOR_REQUEST, DELETE_REPLY_MODERATOR_SUCCESS, DELETE_REPLY_MODERATOR_FAILURE, DELETE_REPLY_MODERATOR_REQUEST, DELETE_REPLY_SUCCESS, DELETE_REPLY_FAILURE, DELETE_REPLY_REQUEST, LIKE_REPLY_SUCCESS, LIKE_REPLY_FAILURE, UNLIKE_REPLY_SUCCESS, UNLIKE_REPLY_FAILURE, LIKE_REPLY_REQUEST, unlikeReplyRequest, UNLIKE_REPLY_REQUEST } from './actions';\nimport { readLocalStorage } from \"../helpers\";\nimport { getPostDetailRequest } from \"../posts/actions\";\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\n\nfunction* createCommentSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const user = readLocalStorage('user');\n    payload.userId = user.id;\n    const response = yield call(Post, `comment/create`, payload, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: CREATE_COMMENT_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: CREATE_COMMENT_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: CREATE_COMMENT_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* createReplySaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const user = readLocalStorage('user');\n    payload.userId = user.id;\n    const response = yield call(Post, `reply/create-reply`, payload, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: CREATE_REPLY_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: CREATE_REPLY_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: CREATE_REPLY_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* likeCommentSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const user = readLocalStorage('user');\n    payload.userId = user.id;\n    const response = yield call(Post, `comment/like?commentId=${payload.commentId}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: LIKE_COMMENT_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: LIKE_COMMENT_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: LIKE_COMMENT_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* unlikeCommentSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const user = readLocalStorage('user');\n    payload.userId = user.id;\n    const response = yield call(Delete, `comment/unlike?commentId=${payload.commentId}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: UNLIKE_COMMENT_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: UNLIKE_COMMENT_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: UNLIKE_COMMENT_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* deleteCommentSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const user = readLocalStorage('user');\n    payload.userId = user.id;\n    const response = yield call(Delete, `comment/delete?id=${payload.commentId}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: DELETE_COMMENT_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: DELETE_COMMENT_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: DELETE_COMMENT_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* deleteCommentModeratorSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Delete, `comment/moderator-delete?id=${payload.commentId}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: DELETE_COMMENT_MODERATOR_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: DELETE_COMMENT_MODERATOR_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: DELETE_COMMENT_MODERATOR_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* deleteReplyModeratorSaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Delete, `reply/moderator-delete?id=${payload.replyId}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: DELETE_REPLY_MODERATOR_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: DELETE_REPLY_MODERATOR_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: DELETE_REPLY_MODERATOR_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* deleteReplySaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const response = yield call(Delete, `reply/delete?id=${payload.replyId}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: DELETE_REPLY_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: DELETE_REPLY_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: DELETE_REPLY_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* likeReplySaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const user = readLocalStorage('user');\n    payload.userId = user.id;\n    const response = yield call(Post, `reply/like?replyId=${payload.replyId}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: LIKE_REPLY_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: LIKE_REPLY_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: LIKE_REPLY_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nfunction* unlikeReplySaga({\n  payload\n}) {\n  try {\n    yield put({\n      type: LOADER_START\n    });\n    const user = readLocalStorage('user');\n    payload.userId = user.id;\n    const response = yield call(Delete, `reply/unlike?replyId=${payload.replyId}`, {}, {}, false);\n\n    if (response && !response.error) {\n      yield put({\n        type: UNLIKE_REPLY_SUCCESS,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    } else {\n      yield put({\n        type: UNLIKE_REPLY_FAILURE,\n        payload: response\n      });\n      yield put({\n        type: LOADER_END\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: UNLIKE_REPLY_FAILURE,\n      payload: error\n    });\n    yield put({\n      type: LOADER_END\n    });\n  }\n\n  yield put(getPostDetailRequest({\n    search: `?status=${payload.postId}`\n  }));\n}\n\nexport default function* Saga() {\n  yield takeLatest(CREATE_COMMENT_REQUEST, createCommentSaga);\n  yield takeLatest(CREATE_REPLY_REQUEST, createReplySaga);\n  yield takeLatest(LIKE_COMMENT_REQUEST, likeCommentSaga);\n  yield takeLatest(UNLIKE_COMMENT_REQUEST, unlikeCommentSaga);\n  yield takeLatest(DELETE_COMMENT_REQUEST, deleteCommentSaga);\n  yield takeLatest(DELETE_COMMENT_MODERATOR_REQUEST, deleteCommentModeratorSaga);\n  yield takeLatest(DELETE_REPLY_REQUEST, deleteReplySaga);\n  yield takeLatest(DELETE_REPLY_MODERATOR_REQUEST, deleteReplyModeratorSaga);\n  yield takeLatest(LIKE_REPLY_REQUEST, likeReplySaga);\n  yield takeLatest(UNLIKE_REPLY_REQUEST, unlikeReplySaga);\n}","map":{"version":3,"sources":["D:/repos/saalla-next.js/lib/comment/sagas.js"],"names":["Get","Post","Delete","call","put","takeLatest","CREATE_COMMENT_FAILURE","CREATE_COMMENT_REQUEST","CREATE_COMMENT_SUCCESS","CREATE_REPLY_FAILURE","CREATE_REPLY_REQUEST","CREATE_REPLY_SUCCESS","LIKE_COMMENT_SUCCESS","LIKE_COMMENT_FAILURE","LIKE_COMMENT_REQUEST","UNLIKE_COMMENT_SUCCESS","UNLIKE_COMMENT_FAILURE","UNLIKE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAILURE","DELETE_COMMENT_REQUEST","DELETE_COMMENT_MODERATOR_SUCCESS","DELETE_COMMENT_MODERATOR_FAILURE","DELETE_COMMENT_MODERATOR_REQUEST","DELETE_REPLY_MODERATOR_SUCCESS","DELETE_REPLY_MODERATOR_FAILURE","DELETE_REPLY_MODERATOR_REQUEST","DELETE_REPLY_SUCCESS","DELETE_REPLY_FAILURE","DELETE_REPLY_REQUEST","LIKE_REPLY_SUCCESS","LIKE_REPLY_FAILURE","UNLIKE_REPLY_SUCCESS","UNLIKE_REPLY_FAILURE","LIKE_REPLY_REQUEST","unlikeReplyRequest","UNLIKE_REPLY_REQUEST","readLocalStorage","getPostDetailRequest","LOADER_START","LOADER_END","createCommentSaga","payload","type","user","userId","id","response","error","search","postId","createReplySaga","likeCommentSaga","commentId","unlikeCommentSaga","deleteCommentSaga","deleteCommentModeratorSaga","deleteReplyModeratorSaga","replyId","deleteReplySaga","likeReplySaga","unlikeReplySaga","Saga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,aAAlC;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,sBADF,EAC0BC,sBAD1B,EACkDC,sBADlD,EAEEC,oBAFF,EAEwBC,oBAFxB,EAE8CC,oBAF9C,EAEoEC,oBAFpE,EAGEC,oBAHF,EAGwBC,oBAHxB,EAG8CC,sBAH9C,EAGsEC,sBAHtE,EAIEC,sBAJF,EAI0BC,sBAJ1B,EAIkDC,sBAJlD,EAI0EC,sBAJ1E,EAKEC,gCALF,EAKoCC,gCALpC,EAKsEC,gCALtE,EAMEC,8BANF,EAMkCC,8BANlC,EAMkEC,8BANlE,EAOEC,oBAPF,EAOwBC,oBAPxB,EAO8CC,oBAP9C,EAOoEC,kBAPpE,EAOwFC,kBAPxF,EAQEC,oBARF,EAQwBC,oBARxB,EAQ8CC,kBAR9C,EAQkEC,kBARlE,EAQsFC,oBARtF,QASO,WATP;AAUA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,mBAAzC;;AAEA,UAAUC,iBAAV,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAyC;AACvC,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMK,IAAI,GAAGP,gBAAgB,CAAC,MAAD,CAA7B;AACAK,IAAAA,OAAO,CAACG,MAAR,GAAiBD,IAAI,CAACE,EAAtB;AACA,UAAMC,QAAQ,GAAG,MAAM5C,IAAI,CAACF,IAAD,EAAQ,gBAAR,EAAyByC,OAAzB,EAAkC,EAAlC,EAAsC,KAAtC,CAA3B;;AACA,QAAIK,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEnC,sBAAR;AAAgCkC,QAAAA,OAAO,EAAEK;AAAzC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAErC,sBAAR;AAAgCoC,QAAAA,OAAO,EAAEK;AAAzC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAErC,sBAAR;AAAgCoC,MAAAA,OAAO,EAAEM;AAAzC,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUC,eAAV,CAA0B;AAAET,EAAAA;AAAF,CAA1B,EAAuC;AACrC,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMK,IAAI,GAAGP,gBAAgB,CAAC,MAAD,CAA7B;AACAK,IAAAA,OAAO,CAACG,MAAR,GAAiBD,IAAI,CAACE,EAAtB;AACA,UAAMC,QAAQ,GAAG,MAAM5C,IAAI,CAACF,IAAD,EAAQ,oBAAR,EAA6ByC,OAA7B,EAAsC,EAAtC,EAA0C,KAA1C,CAA3B;;AACA,QAAIK,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEhC,oBAAR;AAA8B+B,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAElC,oBAAR;AAA8BiC,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAElC,oBAAR;AAA8BiC,MAAAA,OAAO,EAAEM;AAAvC,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUE,eAAV,CAA0B;AAAEV,EAAAA;AAAF,CAA1B,EAAuC;AACrC,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMK,IAAI,GAAGP,gBAAgB,CAAC,MAAD,CAA7B;AACAK,IAAAA,OAAO,CAACG,MAAR,GAAiBD,IAAI,CAACE,EAAtB;AACA,UAAMC,QAAQ,GAAG,MAAM5C,IAAI,CAACF,IAAD,EAAQ,0BAAyByC,OAAO,CAACW,SAAU,EAAnD,EAAsD,EAAtD,EAA0D,EAA1D,EAA8D,KAA9D,CAA3B;;AACA,QAAIN,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAE/B,oBAAR;AAA8B8B,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAE9B,oBAAR;AAA8B6B,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAE9B,oBAAR;AAA8B6B,MAAAA,OAAO,EAAEM;AAAvC,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUI,iBAAV,CAA4B;AAAEZ,EAAAA;AAAF,CAA5B,EAAyC;AACvC,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMK,IAAI,GAAGP,gBAAgB,CAAC,MAAD,CAA7B;AACAK,IAAAA,OAAO,CAACG,MAAR,GAAiBD,IAAI,CAACE,EAAtB;AACA,UAAMC,QAAQ,GAAG,MAAM5C,IAAI,CAACD,MAAD,EAAU,4BAA2BwC,OAAO,CAACW,SAAU,EAAvD,EAA0D,EAA1D,EAA8D,EAA9D,EAAkE,KAAlE,CAA3B;;AACA,QAAIN,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAE5B,sBAAR;AAAgC2B,QAAAA,OAAO,EAAEK;AAAzC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAE3B,sBAAR;AAAgC0B,QAAAA,OAAO,EAAEK;AAAzC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAE3B,sBAAR;AAAgC0B,MAAAA,OAAO,EAAEM;AAAzC,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUK,iBAAV,CAA4B;AAAEb,EAAAA;AAAF,CAA5B,EAAyC;AACvC,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMK,IAAI,GAAGP,gBAAgB,CAAC,MAAD,CAA7B;AACAK,IAAAA,OAAO,CAACG,MAAR,GAAiBD,IAAI,CAACE,EAAtB;AACA,UAAMC,QAAQ,GAAG,MAAM5C,IAAI,CAACD,MAAD,EAAU,qBAAoBwC,OAAO,CAACW,SAAU,EAAhD,EAAmD,EAAnD,EAAuD,EAAvD,EAA2D,KAA3D,CAA3B;;AACA,QAAIN,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEzB,sBAAR;AAAgCwB,QAAAA,OAAO,EAAEK;AAAzC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAExB,sBAAR;AAAgCuB,QAAAA,OAAO,EAAEK;AAAzC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAExB,sBAAR;AAAgCuB,MAAAA,OAAO,EAAEM;AAAzC,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUM,0BAAV,CAAqC;AAAEd,EAAAA;AAAF,CAArC,EAAkD;AAChD,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMQ,QAAQ,GAAG,MAAM5C,IAAI,CAACD,MAAD,EAAU,+BAA8BwC,OAAO,CAACW,SAAU,EAA1D,EAA6D,EAA7D,EAAiE,EAAjE,EAAqE,KAArE,CAA3B;;AACA,QAAIN,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEtB,gCAAR;AAA0CqB,QAAAA,OAAO,EAAEK;AAAnD,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAErB,gCAAR;AAA0CoB,QAAAA,OAAO,EAAEK;AAAnD,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAVD,CAUE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAErB,gCAAR;AAA0CoB,MAAAA,OAAO,EAAEM;AAAnD,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUO,wBAAV,CAAmC;AAAEf,EAAAA;AAAF,CAAnC,EAAgD;AAC9C,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMQ,QAAQ,GAAG,MAAM5C,IAAI,CAACD,MAAD,EAAU,6BAA4BwC,OAAO,CAACgB,OAAQ,EAAtD,EAAyD,EAAzD,EAA6D,EAA7D,EAAiE,KAAjE,CAA3B;;AACA,QAAIX,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEnB,8BAAR;AAAwCkB,QAAAA,OAAO,EAAEK;AAAjD,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAElB,8BAAR;AAAwCiB,QAAAA,OAAO,EAAEK;AAAjD,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAVD,CAUE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAElB,8BAAR;AAAwCiB,MAAAA,OAAO,EAAEM;AAAjD,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUS,eAAV,CAA0B;AAAEjB,EAAAA;AAAF,CAA1B,EAAuC;AACrC,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMQ,QAAQ,GAAG,MAAM5C,IAAI,CAACD,MAAD,EAAU,mBAAkBwC,OAAO,CAACgB,OAAQ,EAA5C,EAA+C,EAA/C,EAAmD,EAAnD,EAAuD,KAAvD,CAA3B;;AACA,QAAIX,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEhB,oBAAR;AAA8Be,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEf,oBAAR;AAA8Bc,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAVD,CAUE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEf,oBAAR;AAA8Bc,MAAAA,OAAO,EAAEM;AAAvC,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUU,aAAV,CAAwB;AAAElB,EAAAA;AAAF,CAAxB,EAAqC;AACnC,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMK,IAAI,GAAGP,gBAAgB,CAAC,MAAD,CAA7B;AACAK,IAAAA,OAAO,CAACG,MAAR,GAAiBD,IAAI,CAACE,EAAtB;AACA,UAAMC,QAAQ,GAAG,MAAM5C,IAAI,CAACF,IAAD,EAAQ,sBAAqByC,OAAO,CAACgB,OAAQ,EAA7C,EAAgD,EAAhD,EAAoD,EAApD,EAAwD,KAAxD,CAA3B;;AACA,QAAIX,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEb,kBAAR;AAA4BY,QAAAA,OAAO,EAAEK;AAArC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEZ,kBAAR;AAA4BW,QAAAA,OAAO,EAAEK;AAArC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEZ,kBAAR;AAA4BW,MAAAA,OAAO,EAAEM;AAArC,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAED,UAAUW,eAAV,CAA0B;AAAEnB,EAAAA;AAAF,CAA1B,EAAuC;AACrC,MAAI;AACF,UAAMtC,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAT;AACA,UAAMK,IAAI,GAAGP,gBAAgB,CAAC,MAAD,CAA7B;AACAK,IAAAA,OAAO,CAACG,MAAR,GAAiBD,IAAI,CAACE,EAAtB;AACA,UAAMC,QAAQ,GAAG,MAAM5C,IAAI,CAACD,MAAD,EAAU,wBAAuBwC,OAAO,CAACgB,OAAQ,EAAjD,EAAoD,EAApD,EAAwD,EAAxD,EAA4D,KAA5D,CAA3B;;AACA,QAAIX,QAAQ,IAAI,CAACA,QAAQ,CAACC,KAA1B,EAAiC;AAC/B,YAAM5C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEX,oBAAR;AAA8BU,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD,KAHD,MAGO;AACL,YAAMpC,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEV,oBAAR;AAA8BS,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAT;AACA,YAAM3C,GAAG,CAAC;AAAEuC,QAAAA,IAAI,EAAEH;AAAR,OAAD,CAAT;AACD;AACF,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEV,oBAAR;AAA8BS,MAAAA,OAAO,EAAEM;AAAvC,KAAD,CAAT;AACA,UAAM5C,GAAG,CAAC;AAAEuC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAT;AACD;;AACD,QAAMpC,GAAG,CAACkC,oBAAoB,CAAC;AAAEW,IAAAA,MAAM,EAAG,WAAUP,OAAO,CAACQ,MAAO;AAApC,GAAD,CAArB,CAAT;AACD;;AAGD,eAAe,UAAUY,IAAV,GAAiB;AAC9B,QAAMzD,UAAU,CAACE,sBAAD,EAAyBkC,iBAAzB,CAAhB;AACA,QAAMpC,UAAU,CAACK,oBAAD,EAAuByC,eAAvB,CAAhB;AACA,QAAM9C,UAAU,CAACS,oBAAD,EAAuBsC,eAAvB,CAAhB;AACA,QAAM/C,UAAU,CAACY,sBAAD,EAAyBqC,iBAAzB,CAAhB;AACA,QAAMjD,UAAU,CAACe,sBAAD,EAAyBmC,iBAAzB,CAAhB;AACA,QAAMlD,UAAU,CAACkB,gCAAD,EAAmCiC,0BAAnC,CAAhB;AACA,QAAMnD,UAAU,CAACwB,oBAAD,EAAuB8B,eAAvB,CAAhB;AACA,QAAMtD,UAAU,CAACqB,8BAAD,EAAiC+B,wBAAjC,CAAhB;AACA,QAAMpD,UAAU,CAAC6B,kBAAD,EAAqB0B,aAArB,CAAhB;AACA,QAAMvD,UAAU,CAAC+B,oBAAD,EAAuByB,eAAvB,CAAhB;AACD","sourcesContent":["import { Get, Post, Delete } from \"../services\";\r\nimport { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  CREATE_COMMENT_FAILURE, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS,\r\n  CREATE_REPLY_FAILURE, CREATE_REPLY_REQUEST, CREATE_REPLY_SUCCESS, LIKE_COMMENT_SUCCESS,\r\n  LIKE_COMMENT_FAILURE, LIKE_COMMENT_REQUEST, UNLIKE_COMMENT_SUCCESS, UNLIKE_COMMENT_FAILURE,\r\n  UNLIKE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILURE, DELETE_COMMENT_REQUEST,\r\n  DELETE_COMMENT_MODERATOR_SUCCESS, DELETE_COMMENT_MODERATOR_FAILURE, DELETE_COMMENT_MODERATOR_REQUEST,\r\n  DELETE_REPLY_MODERATOR_SUCCESS, DELETE_REPLY_MODERATOR_FAILURE, DELETE_REPLY_MODERATOR_REQUEST,\r\n  DELETE_REPLY_SUCCESS, DELETE_REPLY_FAILURE, DELETE_REPLY_REQUEST, LIKE_REPLY_SUCCESS, LIKE_REPLY_FAILURE,\r\n  UNLIKE_REPLY_SUCCESS, UNLIKE_REPLY_FAILURE, LIKE_REPLY_REQUEST, unlikeReplyRequest, UNLIKE_REPLY_REQUEST\r\n} from './actions';\r\nimport { readLocalStorage } from \"../helpers\";\r\nimport { getPostDetailRequest } from \"../posts/actions\";\r\nimport { LOADER_START, LOADER_END } from \"../loader/actions\";\r\n\r\nfunction* createCommentSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const user = readLocalStorage('user');\r\n    payload.userId = user.id;\r\n    const response = yield call(Post, `comment/create`, payload, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: CREATE_COMMENT_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: CREATE_COMMENT_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: CREATE_COMMENT_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* createReplySaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const user = readLocalStorage('user');\r\n    payload.userId = user.id;\r\n    const response = yield call(Post, `reply/create-reply`, payload, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: CREATE_REPLY_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: CREATE_REPLY_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: CREATE_REPLY_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* likeCommentSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const user = readLocalStorage('user');\r\n    payload.userId = user.id;\r\n    const response = yield call(Post, `comment/like?commentId=${payload.commentId}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: LIKE_COMMENT_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: LIKE_COMMENT_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: LIKE_COMMENT_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* unlikeCommentSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const user = readLocalStorage('user');\r\n    payload.userId = user.id;\r\n    const response = yield call(Delete, `comment/unlike?commentId=${payload.commentId}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: UNLIKE_COMMENT_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: UNLIKE_COMMENT_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: UNLIKE_COMMENT_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* deleteCommentSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const user = readLocalStorage('user');\r\n    payload.userId = user.id;\r\n    const response = yield call(Delete, `comment/delete?id=${payload.commentId}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: DELETE_COMMENT_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: DELETE_COMMENT_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: DELETE_COMMENT_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* deleteCommentModeratorSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Delete, `comment/moderator-delete?id=${payload.commentId}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: DELETE_COMMENT_MODERATOR_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: DELETE_COMMENT_MODERATOR_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: DELETE_COMMENT_MODERATOR_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* deleteReplyModeratorSaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Delete, `reply/moderator-delete?id=${payload.replyId}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: DELETE_REPLY_MODERATOR_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: DELETE_REPLY_MODERATOR_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: DELETE_REPLY_MODERATOR_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* deleteReplySaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const response = yield call(Delete, `reply/delete?id=${payload.replyId}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: DELETE_REPLY_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: DELETE_REPLY_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: DELETE_REPLY_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* likeReplySaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const user = readLocalStorage('user');\r\n    payload.userId = user.id;\r\n    const response = yield call(Post, `reply/like?replyId=${payload.replyId}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: LIKE_REPLY_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: LIKE_REPLY_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: LIKE_REPLY_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\nfunction* unlikeReplySaga({ payload }) {\r\n  try {\r\n    yield put({ type: LOADER_START });\r\n    const user = readLocalStorage('user');\r\n    payload.userId = user.id;\r\n    const response = yield call(Delete, `reply/unlike?replyId=${payload.replyId}`, {}, {}, false);\r\n    if (response && !response.error) {\r\n      yield put({ type: UNLIKE_REPLY_SUCCESS, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    } else {\r\n      yield put({ type: UNLIKE_REPLY_FAILURE, payload: response });\r\n      yield put({ type: LOADER_END });\r\n    }\r\n  } catch (error) {\r\n    yield put({ type: UNLIKE_REPLY_FAILURE, payload: error });\r\n    yield put({ type: LOADER_END });\r\n  }\r\n  yield put(getPostDetailRequest({ search: `?status=${payload.postId}` }));\r\n}\r\n\r\n\r\nexport default function* Saga() {\r\n  yield takeLatest(CREATE_COMMENT_REQUEST, createCommentSaga);\r\n  yield takeLatest(CREATE_REPLY_REQUEST, createReplySaga);\r\n  yield takeLatest(LIKE_COMMENT_REQUEST, likeCommentSaga);\r\n  yield takeLatest(UNLIKE_COMMENT_REQUEST, unlikeCommentSaga);\r\n  yield takeLatest(DELETE_COMMENT_REQUEST, deleteCommentSaga);\r\n  yield takeLatest(DELETE_COMMENT_MODERATOR_REQUEST, deleteCommentModeratorSaga);\r\n  yield takeLatest(DELETE_REPLY_REQUEST, deleteReplySaga);\r\n  yield takeLatest(DELETE_REPLY_MODERATOR_REQUEST, deleteReplyModeratorSaga);\r\n  yield takeLatest(LIKE_REPLY_REQUEST, likeReplySaga);\r\n  yield takeLatest(UNLIKE_REPLY_REQUEST, unlikeReplySaga);\r\n}"]},"metadata":{},"sourceType":"module"}